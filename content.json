[{"title":"学习资源分享","date":"2017-03-20T13:03:38.460Z","path":"2017/03/20/IT资源共享1/","text":"开篇的话开源世界让我拥有了很多资源，也让我学习到了很多知识！有一些人一直默默的为开源界做出贡献，为人类的进步坐着改变！ 热爱开源 热爱分享 我希望大家在获取资源的同时将本片博客进行转发评论，本博客致力于让更多的人可以拥有更好的学习资源！同时还请大家持续关注我的博客，不定期会分享一些学习资源，以及运维的教程！！ Linux 学习资源1.2016烨子女神Linux 密码：z1f9 2.阿铭Linux 密码：wdxn 3.Linux0.11内核 密码：cm6o 4.Linux内核 密码：1eq4 5.炼数成金 Linux 密码：d1a6 6.嵌入式LINUX 密码：1o7k 7.华清远见Linux 密码：87gd 8.Linux系统篇 密码：dwv0 9.嵌入式学习 密码：etoq 10.sundy 嵌入式 密码：ivkq python 学习资源1.python魔鬼训练 密码：u40y 2.python运维实战 密码：4ezg 3.机器学习 密码：don7 4.python web开发 密码：pyw8 5.明星python 密码：b76a 云计算 学习资源1.2016炼数成金 密码：7irq 2.Hadoop视频 密码：aa04 3.五套云计算视频 密码：yzjh 4.大数据实战 密码：ry2o 5.黑马Hadoop 密码：iats 6.大数据源码 密码：0dnl 7.Hadoop多套视频 密码：ftdf 8.传智播客三期大数据 密码：fasq 9.about云 openstack 密码：v8eo 10.openstack 密码：luiq HTML5 学习资源1.密码：lofn 2.密码：0wwu 3.密码：bjbi Java 学习资源1.密码：w7wa 2.密码：4nha C++ 学习资源1.密码：ur51 2.密码：f8fm 小工具1. 密码：71r7","tags":[{"name":"互联网资源","slug":"互联网资源","permalink":"http://cyysu.github.io/tags/互联网资源/"},{"name":"编程","slug":"编程","permalink":"http://cyysu.github.io/tags/编程/"},{"name":"运维","slug":"运维","permalink":"http://cyysu.github.io/tags/运维/"},{"name":"IT","slug":"IT","permalink":"http://cyysu.github.io/tags/IT/"},{"name":"程序员","slug":"程序员","permalink":"http://cyysu.github.io/tags/程序员/"}]},{"title":"服务监控Nagios","date":"2017-03-20T12:19:02.658Z","path":"2017/03/20/Nagios/","text":"今日博文今天更新Nagios服务，有一些企业里面会用的到，技多不压身嘛！！ 大家有什么问题都可以练习我！！ 一会给大家分享一些好的编程工具和资源，还请大家关注我的博客！每天都有更新哦！ 软件准备NsclientNagios核心文件vautour_style主题包nrpe-2.15 Nagios插件存放脚本 安装教程word版本教程 问题解决方案来源安装介绍以及注意事项MYSQL出现111错误 图文教程","tags":[{"name":"CentOS6.8","slug":"CentOS6-8","permalink":"http://cyysu.github.io/tags/CentOS6-8/"},{"name":"Nagios","slug":"Nagios","permalink":"http://cyysu.github.io/tags/Nagios/"},{"name":"监控","slug":"监控","permalink":"http://cyysu.github.io/tags/监控/"}]},{"title":"LNMP源码安装","date":"2017-03-19T07:57:35.789Z","path":"2017/03/19/LNMP源码安装/","text":"安装前的介绍LNMP=Linux Nginx Mysql PHP Nginx (&quot;engine x&quot;) 是一个高性能的 HTTP 和 反向代理 服务器。Nginx 是由 Igor Sysoev 为俄罗斯访问量第二的 Rambler.ru 站点开发的，第一个公开版本0.1.0发布于2004年10月4日。其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。 Nginx是一款轻量级的Web服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个BSD-like 协议下发行。由俄罗斯的程序设计师IgorSysoev所开发，供俄国大型的入口网站及搜索引擎Rambler（俄文：Рамблер）使用。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度BWS、新浪、网易、腾讯等 安装教程安装教程 软件包准备libmcrypt-2.5.8mysql-5.6pcre-8.37php-5.6nginx-1.8 工作原理1.Apache工作原理 2.Nginx工作原理 图文教程","tags":[{"name":"CentOS6.8","slug":"CentOS6-8","permalink":"http://cyysu.github.io/tags/CentOS6-8/"},{"name":"源码安装","slug":"源码安装","permalink":"http://cyysu.github.io/tags/源码安装/"},{"name":"LNMP","slug":"LNMP","permalink":"http://cyysu.github.io/tags/LNMP/"}]},{"title":"LAMP源码安装","date":"2017-03-19T02:04:19.131Z","path":"2017/03/19/LAMP源码安装/","text":"安装前的介绍Linux+Apache+MySQL/MariaDB+Perl/PHP/Python一组常用来搭建动态网站或者服务器的开源软件，本身都是各自独立的程序，但是因为常被放在一起使用，拥有了越来越高的兼容度，共同组成了一个强大的Web应用程序平台。随着开源潮流的蓬勃发展，开放源代码的LAMP已经与J2EE和.Net商业软件形成三足鼎立之势，并且该软件开发的项目在软件方面的投资成本较低，因此受到整个IT界的关注。从网站的流量上来说，70%以上的访问流量是LAMP来提供的，LAMP是最强大的网站解决方案． 安装所需软件包php5.6Apache2.4mysql5.6apr1.5apr-util1.5pcre8.3 安装教程安装教程 图文详解","tags":[{"name":"CentOS6.8","slug":"CentOS6-8","permalink":"http://cyysu.github.io/tags/CentOS6-8/"},{"name":"源码安装","slug":"源码安装","permalink":"http://cyysu.github.io/tags/源码安装/"},{"name":"LAMP","slug":"LAMP","permalink":"http://cyysu.github.io/tags/LAMP/"}]},{"title":"LAMP搭建博客","date":"2017-03-18T12:09:29.209Z","path":"2017/03/18/LAMP搭建博客/","text":"实验前的准备wordpress安装包wordpress主题包-欲思主题wordpress主题包-Zanblog主题wordpress主题包-Zanblog插件 emlog的安装国人的emlog安装包emlog主题 安装","tags":[{"name":"CentOS6.8","slug":"CentOS6-8","permalink":"http://cyysu.github.io/tags/CentOS6-8/"},{"name":"LAMP","slug":"LAMP","permalink":"http://cyysu.github.io/tags/LAMP/"},{"name":"WEB服务器","slug":"WEB服务器","permalink":"http://cyysu.github.io/tags/WEB服务器/"},{"name":"博客","slug":"博客","permalink":"http://cyysu.github.io/tags/博客/"}]},{"title":"邮件服务(二)","date":"2017-03-17T15:26:37.009Z","path":"2017/03/17/邮件服务(二)/","text":"环境准备前的基础知识 Courier-IMAP maildrop百科 Cyrus SASL extman spamassassin clamav amavisd-new amavisd-new clamAV Spam Locker dspam 参考教程1.参考教程2.需要注意的是在这个教程里面添加SASL配置的时候类似如下1234567891011smtpd_recipient_restrictions = permit_mynetworks, permit_sasl_authenticated, reject_non_fqdn_hostname, reject_non_fqdn_sender, reject_non_fqdn_recipient, reject_unauth_destination, reject_unauth_pipelining, reject_invalid_hostname,注意前面加空格，否则会报错 3.还有一处需要注意的就是添加authmysqlrc配置的的时候类似如下123456789101112131415161718MYSQL_SERVER localhostMYSQL_USERNAME extmailMYSQL_PASSWORD extmailMYSQL_SOCKET /var/lib/mysql/mysql.sockMYSQL_PORT 3306MYSQL_OPT 0MYSQL_DATABASE extmailMYSQL_USER_TABLE mailboxMYSQL_CRYPT_PWFIELD passwordMYSQL_UID_FIELD uidnumberMYSQL_GID_FIELD gidnumberMYSQL_LOGIN_FIELD usernameMYSQL_HOME_FIELD homedirMYSQL_NAME_FIELD name....在localhost后面没有空格，多添加的时候会连接不上数据库 EMOS镜像下载地址 密码：wmr2 简便安装看完上面的安装步骤你肯定烦了，下面我们用镜像来进行安装，这个就是so easy 了！！ 参考教程","tags":[{"name":"CentOS6.8","slug":"CentOS6-8","permalink":"http://cyysu.github.io/tags/CentOS6-8/"},{"name":"运维","slug":"运维","permalink":"http://cyysu.github.io/tags/运维/"},{"name":"邮件服务","slug":"邮件服务","permalink":"http://cyysu.github.io/tags/邮件服务/"}]},{"title":"邮件服务","date":"2017-03-16T15:30:22.682Z","path":"2017/03/16/新版邮件服务/","text":"服务安装 安装完效果 服务配置 163邮箱测试 查看结果 本地测试 配置文件解析 搭建案例环境 检测结果 错误解决方案 关于明天博客预告今天简单介绍一下Postfix服务以及使用，本篇博客含有两个案例，可以查看我之前的笔记就可以找到，配合本篇 博客进行一起学习效果更佳 Postfix服务传送门","tags":[{"name":"CentOS6.8","slug":"CentOS6-8","permalink":"http://cyysu.github.io/tags/CentOS6-8/"},{"name":"运维","slug":"运维","permalink":"http://cyysu.github.io/tags/运维/"},{"name":"邮件服务","slug":"邮件服务","permalink":"http://cyysu.github.io/tags/邮件服务/"}]},{"title":"新版博客说明","date":"2017-03-16T12:10:02.605Z","path":"2017/03/16/关于新版博客说明/","text":"后续博客的说明昨天已经上传了之前的笔记记录，是不是大家总感觉缺点什么哈？对，单纯的笔记太枯燥了，每个人的开发环境不一样，看文字没意思，为适应广大初学者学习，新版笔记采用图文的方式进行记录，图文上有文字说明，希望大家喜欢。","tags":[{"name":"CentOS6.8","slug":"CentOS6-8","permalink":"http://cyysu.github.io/tags/CentOS6-8/"},{"name":"运维","slug":"运维","permalink":"http://cyysu.github.io/tags/运维/"},{"name":"Linux服务","slug":"Linux服务","permalink":"http://cyysu.github.io/tags/Linux服务/"}]},{"title":"博客说明","date":"2017-03-15T13:08:26.608Z","path":"2017/03/15/关于我/","text":"[TOC] 1.关于我1目前就读于燕山大学，即将毕业（2017），就这大学四年我一直有想要做的事情却又没有做完，一直有想要说的话却没有及时记录下来。就这今天正好有空，写一篇博客来记录一下整个大学四年的点点滴滴。在这里我将大学四年比喻成 “菜鸟”、“入门” 、“进阶” 、“大神” 2.菜鸟123456789101112131415161718192021222324252627刚上大一我怀着向往大学的心情来到学校，相信很多在高中的时候都听老师说“你们上大学就轻松了”，这句话在不同的时刻有着不同的感受。来到学校的第一眼我感到好失望，原来这就是大学呀！这么破！当时有着冲动想要回去在重新念书。忍住了！！嘿嘿在大一上学期的时候我遇到了改变我轨迹的第一个学长，他叫王悦，人特别好，对我也特别好。当时就加入了一个社团--科技创新协会(后面简称科协)。咱们先说说我的学长，在聊我的社团。他，在社团招新的时候我遇到的，脸上有痘痘，不过依然不影响帅气的形象，也不知道怎么回事我是我们宿舍唯一的一个加入到科协社团的人，也就是这件事改变了我人生轨迹。现在想想如果我当时没有加入这个社团，那么我这大学四年会怎么度过啊！！每次我的部长开会的时候我都不去，以至于后来我有我的学弟之后，看见他们每周开着会，心里顿生内疚啊！当然这都是后话了，我们继续！转眼就到了我们刚上大学的第一个假期，十一长假来了，当然是美美的7天长假啦！！苦逼的我当时不太想出去玩耍，就留在了学校搞世纪杯论文，当时也是第一个写论文，不会呀！说来也奇怪，奇葩的我搞了个量子计算机方面相关的！虽说我对这个东西有点了解吧！但是依旧没有获奖！！在这个10月1的假期还有一件重要的事情就是学习改变我人生轨迹的第一件事--单片机相信大家好多的人开始学习单片机的时候都是学习的STC89c51这款单片机，不错，我也不例外，我也学习的这款单片机。入门的教程依然是被很多师兄讨厌的郭天祥的51视频。当时听完他的时候感觉好牛逼的样子呀！我也要成为那么牛逼的人，可惜现在一直没有感觉自己怎么牛逼！哎，惭愧啊！继续我们的10.1假期吧，那个时候我每天晚上去我的师兄那里去学习，他单独辅导我，当时打字也不是那么的快，写程序也不是那么的会检查错误。有的时候就是差那么个分号，或者少了个字母，悲催啊！后来在自己多练习的基础上终于完成了打字的基本功，编程方面的基本功也算是可以了！就这样持续了7天，我比我们的小伙伴多学习了好多知识，也为我自己以后奠定了一个里程碑。这就样学习单片机，学习单片机，学习单片机，重要的事情说三遍。直到我直到我们社团还有一个比较牛逼的部门-研发部。不过需要经过考核才能进入。我就更加下定了决心去参加考核，这一段历史不多说了，最后如我所愿，加入了科协社团的研发部，在那里我遇到了一大堆牛逼的学长，有“学霸”，我认为的学霸和大家认为的不一样！（学霸就是不学习成绩依然霸道，实践能力也很牛逼！！），以及改变我现在轨迹的另一位师兄。下面介绍一下这两位师兄：白鹏飞师兄和付贱师兄白鹏飞师兄，一直和我关系很好，在我后来的学习上也帮助了我很多，他就是我所说的那种学霸类型的！！同时这里也希望他在北京交通大学美好的度过研究生阶段。付贱师兄，研发部里面的头头，让人感觉不出来深度，但是给人的感觉就是很很棒，很牛逼，当时他的一句话说你们谁想学习嵌入式开发，也就是Linux开发，也就促使我开始学习Linux，这一段历史后面在讲。就这样大一上学期的时间过去了，在最后的期末的用一个项目结束了我的这个阶段-自制单片机最小系统。功能就是串口下载模块，数码管模块，矩阵键盘模块，LED模块。就这样进入了自己的第一个寒假。其实在学校大家都在学习，那么什么时候才是超过别人的最佳时间呢，没错，就是寒假。这个时候每个人的学习环境不一样，我们每个人想要学习的心思也就不一样，也就是我们超过别人的最佳阶段。在这个寒假的里我有幸接触了Java，我的第一门编程语言，跨平台的，不对，应该说是第2门编程语言，第一门当然是C语言了，哈哈！在学习JAVA的时候，我知道了一个培训机构，传智播客。在里面认识了一个很幽默的老师，任小龙老师，最经典的一句话就是“龙哥的视频苍老师都喜欢！”，后来他们这些老师独立出去了，搞了一个小马哥教育，现在搞的还不错。当时学Java也不知道为了啥，就那么的学了，学完了JavaSE后来有学习了JavaWEB，这个阶段没学习SSH经典的框架，现在这框架已经太“过时了”，后来有幸接触了Android课程，学习了一段时间，当时Andorid工程师很火，智能机刚好很火，各大公司纷纷加入移动端的开发，现在却不怎么样了。就这样大一下学期的生活就这样度过了。 3.入门123转眼就来到了大二，那个时候我还不了解Linux是个什么东东，这一年付出了整整一年的时间来做了个飞思卡尔比赛，一年的时间投入到这个上面，真心的是很累，等我们参加完华北赛区的比赛的时候我好长一段时间才缓解过来。这个阶段唯一的一件事情就是大家了自己博客，也就是github博客，原版不是现在这个样子，原版的博客我已经删除了！当时还是Hexo2.0阶段，现在改变了很多。这一阶段我就不多说了，也不想太多说啥！ 4.进阶12 来到了大三，上学期基本是没怎么学习，也就是这样我认为我大学有点不完美，有些事情该做的没有做，在这个阶段我学习了Linux，学习了Linux运维方面的知识，当然刚开始学习Linux的时候都是从基本的命令开始，首先你得会玩电脑吧，会装一些软件，这些是最基本得。和我们在windows上得不同，Linux装软件需要软件包管理器，当然也可以自己去下载，期间了解了一下了一些其他得编程语言，如python，php，html，c#...当然都是了解语法得阶段，这个没什么难的，熟悉了一门语言，其他得大部分都是一样，不一样得就是语法，这个阶段对LINUX运维大概了解了一番，不过依然不是那么得熟悉，真正开始得时候是大四得时候，哎，想想都后悔，也怪自己当时太高傲了，把事情想得太简单了！！ 5.大神1234567时间过的很快，转眼就要到毕业了，上面大二和大三得时候我不太想写了，那个阶段我就是看见什么好奇我就捣鼓啥，以致于后来看见学弟他们出现什么问题我就直到那里出现了问题，当时那么阶段学习到得知识最重要得就是解决问题得能力，这一点很重要，千万不要一遇到不会得问题就是问本人，有的很很好，有的人就部愿意帮助你，这个你也不要怨别人，这个现象很正常！大四，这一年我收获了很多友谊，和他们在一起我感觉很开心，每天聊聊小技术，嘲笑嘲笑，偶尔敲敲代码。我得GitHub上存储了很多参考资料，大家感兴趣得可以点击主页得github图标去查看最后在这里我祝愿帮助过我得人，学校得师兄们，工作得师兄们，老师们生活美好，步步高升！！！","tags":[{"name":"博客","slug":"博客","permalink":"http://cyysu.github.io/tags/博客/"},{"name":"大学","slug":"大学","permalink":"http://cyysu.github.io/tags/大学/"}]},{"title":"Apache服务","date":"2017-03-15T11:13:48.639Z","path":"2017/03/15/9.Linux运维服务-Apache服务/","text":"##Linux运维笔记(就老男孩运维28期、马哥教育、学神IT、老段带你学Linux、Linux-Cast整理而来) ##声明 “-“ 后面接的是段落小节标题 笔记按照服务一般配置整理 本文采用软件为 MarkdownPad2进行编辑 本文记录时间 2/27/2017 5:38:32 PM 请将本文ip替换成自己的ip 本文内容如有不当之处，欢迎批评指正 文档书写风格 章节内的小节缩进2个tab，小节内容在章节的基础上缩进1个tab 本文大纲1.开篇的话 2.Apache 服务 3.案例 1.开篇的话学习Linux服务的大体流程如下 了解服务的作用：名称，功能，特点 安装 配置文件位置，端口 服务启动关闭的脚本 此服务的使用方法 修改配置文件，实战举例 排错(从下到上，从内到外) 2.Apache 服务简介 web服务概述： WEB服务器也称为WWW(WORLD WIDE WEB，万维网)服务器，主要功能是提供网上信息浏览服务。 常见web服务器（web）： httpd（apache）、nginx +PHP tomcat： jsp + html win:IIS 客户端：IE 、firefox、chrome 、手机（浏览器）Browser 今天的主角：LAMP=Linux Apache Mysql PHP 中的 Apache（HTTPD） 类 LINUX 系统 Linux+Apache+Mysql/MariaDB+Perl/PHP/Python 一组常用来搭建动态网站或者服务器 的开源软件，本身都是各自独立的程序，但是因为常被放在一起使用，拥有了越来越高的兼 容度，共同组成了一个强大的 Web 应用程序平台。随着开源潮流的蓬勃发展，开放源代码 的 LAMP 已经与 J2EE 和.Net 商业软件形成三足鼎立之势，并且该软件开发的项目在软件方 面的投资成本较低，因此受到整个 IT 界的关注。从网站的流量上来说，70%以上的访问流量 是 LAMP 来提供的，LAMP 是最强大的网站解决方案 什么是 Apache Apache HTTPD Server 简称 Apache，是 Apache 软件基金会的一个开源的网页服务器， 可以在大多数计算机操作系统中运行，由于其多平台和安全性被广泛使用，是最流行的 Web 服务器端软件之一。它快速、可靠并且可通过简单的 API 扩展，将 Perl/Python 等解释器编 译到服务器中！Apache HTTP 服务器是一个模块化的服务器,各个功能使用模块化进行插拔！ 目前支持 Windows，Linux，Unix 等平台！ Apache 软件基金会（也就是 Apache Software Foundation，简称为 ASF），是专门为运 作一个开源软件项目的 Apache 的团体提供支持的非盈利性组织，这个开源软件项目就是 Apache 项目！那么我们的 HTTPD 也只是 Apache 的开源项目之一！ 主要的开源项目：HTTP Server，Ant，DB，iBATIS，Jakarta，Logging，Maven，Struts， Tomcat，Tapestry,Hadoop 等等。只是最有名的是 HTTP Server，所以现在所说的 Apache 已 经就是 HTTPD Server 的代号了! 我们还见的比较多的是 Tomcat，Hadoop 等项目 官方网站：http://www.apache.org/httpd：http://httpd.apache.org/ 什么是 Mysql MySQL 是一个关系型数据库管理系统，由瑞典 MySQL AB 公司开发，目前属于 Oracle 旗下公司，他也是最流行的关系型数据库管理系统！特别是在 WEB 应用方面！ 关系型数据库：它通过数据、关系和对数据的约束三者组成的数据模型来存放和管理数 据 官方网站：http://www.mysql.com/ 什么是 PHP PHP（外文名:PHP: Hypertext Preprocessor，中文名：“超文本预处理器”）是一种通 用开源脚本语言。语法吸收了 C 语言、Java 和 Perl 的特点，利于学习，使用广泛，主要适 用于 Web 开发领域。PHP 独特的语法混合了 C、Java、Perl 以及 PHP 自创的语法。它可以 比 CGI 或者 Perl 更快速地执行动态网页。用 PHP 做出的动态页面与其他的编程语言相比， PHP 是将程序嵌入到 HTML（标准通用标记语言下的一个应用）文档中去执行，执行效率比 完全生成 HTML 标记的 CGI 要高许多；PHP 还可以执行编译后代码，编译可以达到加密和 优化代码运行，使代码运行更快。 简单的说，PHP 就是一个脚本解释器！ 官方网站：http://php.net/ PHP 服务器安装好之后，升级切记注意，不要盲目升级！因为它会废弃很多废弃低效的语法! 工作原理 服务安装、启动和配置 服务安装 yum install -y httpd #安装服务器端：httpd yum install elinks #安装字符界面的下浏览器客户端 服务启动、端口检测和加入开机启动项 service httpd restart netstat -anutp | grep 80 chkconfig httpd on 服务配置 vim /etc/httpd/conf/httpd.conf #配置文件的位置 配置参数 ServerName 192.168.1.235:80 #服务器主机名 PidFile run/httpd.pid#apache #运行进程 ID 存放 Timeout 60 #超时时间，多少 s 没有反应就超时 KeepAlive Off #是否允许一个永久的链接，设置为 OFF 的时候，不 能保持连接功能，传输效率比较低，设置为 ON 时，可以提高服务器传输文件的效率，建议开启 MaxKeepAliveRequests 100 #设置 KeepAlive 为 ON 时，设置客户端每次连接允许 请求相应最大文件数，默认 100 个 KeepAliveTimeout 15 #超时时间，同一个客户端下一个请求 15s 没收到就 超时 Listen 80#监听端口，默认本地 IP，如果指定 ip 写上 IP:80 &lt;IfModule prefork.c&gt; StartServers8 #服务开始起启动 8 个进程 MinSpareServers5 #最小空闲 5 个进程 MaxSpareServers20 #最多空闲 20 个进程 ServerLimit256 #服务器允许配置进程数上线 MaxClients256 #最大连接数 256，超过要进入等候队列 MaxRequestsPerChild4000 #每个进程生存期内服务最大的请求数量，0 表示用不 结束 &lt;/IfModule&gt; &lt;Directory /&gt; Options FollowSymLinks #Options Indexes 目录浏览FollowSymLinks 用连接 浏览 AllowOverride None #设置为 none，忽略.htaccess &lt;/Directory&gt; LoadModule auth_basic_module modules/mod_auth_basic.so #载入的库，模块 ● ● ● ● ● ● Include conf.d/*.conf #conf.d 里面的 conf 文件也属有效配置文件 User apache#apache #运行以哪个身份运行 Group apache#apache #运行以哪个组的身份运行 ServerAdmin root@localhost #管理员邮箱 DocumentRoot &quot;/var/www/html&quot; #默认的主目录，如果改动要改动两处，Directory &lt;Directory &quot;/var/www/html&quot;&gt; Options Indexes FollowSymLinks AllowOverride None Order allow,deny #这里默认后者生效，也就是 deny 生效 Allow from all #这里说允许所有 &lt;/Directory&gt; LogLevel warn #日志等级 DirectoryIndex index.html index.html.var #首页 AccessFileName .htaccess #access 文件名 AddDefaultCharset UTF-8 #支持的语言，默认编码 #配置文件的最后是虚拟主机的字段，其中你大部分字段做个了解即可，用到的时候去查 即可 3.案例例1：搭建一台测试web服务器 分析： 部门内部搭建一台WEB服务器，采用的IP地址和端口为192.168.0.63:80，首页采用index.html文件。 管理员E-mail地址为 cat@xuegod.cn，网页的编码类型采用UTF-8，所有网站资源都存放在/var/www/html目录下并将Apache的配置文件根目录设置为/etc/httpd目录。 方案： vim /etc/httpd/conf/httpd.conf 设置Apache 的根目录为/etc/httpd 设置httpd 监听端口80 设置管理员E-mail地址为 cat@xuegod.cn 设置WEB 服务器的主机名和监听端口为192.168.0.63:80 设置Apache 文档目录为/var/www/html 设置主页文件为 index.html 改配置文件之前，记得先备份一份，以便恢复。 修改配置文件相关参数： [root@xuegod63 chroot]# vim /etc/httpd/conf/httpd.conf #以下参数需要我们掌握 ServerRoot &quot;/etc/httpd&quot; #apache配置文件的根目录 Timeout 60 #超时时间 Listen 80 监听的端口 ServerAdmin cat@xuegod.cn #设置管理员，e-mail 地址 ServerName 192.168.0.63:80 #服务器主机名 DocumentRoot &quot;/var/www/html&quot; #网站页面根目录 Options Indexes FollowSymLinks #当一个目录没有默认首页时，允许显示此目录列表 DirectoryIndex index.html index.php #指定默认首页 编码： AddDefaultCharset UTF-8 # 设置服务器的默认编码为： UTF-8 取消apache默认欢迎页： [root@xuegod63 ~]# vim /etc/httpd/conf.d/welcome.conf # # This configuration file enables the default &quot;Welcome&quot; # page if there is no default index page present for # the root URL. To disable the Welcome page, comment # out all the lines below. # #&lt;LocationMatch &quot;^/+$&quot;&gt; #把红色内容注释 # Options -Indexes # ErrorDocument 403 /error/noindex.html #&lt;/LocationMatch&gt; 重启： [root@xuegod63 ~]# service httpd restart 创建首页： # echo &apos;welcome to www.xuegod.cn!&apos; &gt; /var/www/html/index.html 例2：使用yum搭建LAMP环境 yum install httpd mysql mysql-server php php-mysql –y service mysqld start chkconfig mysqld on 安装完成之后首先要测试一下Mysql，在终端输入mysql如果出现mysql的提示符号那么代表Mysql安装成功 测试apache是否支持php cd /var/www/html/ [root@xuegod63 html]# vim index.php &lt;?php phpinfo(); ?&gt; 配置apache虚拟主机，实现在一台服务器上运行多个网站 apache虚拟主机实现有三种方法： 1、通过不同的IP地址 2、通过不同的域名 3、通过不同的端口号 配置文件可以修改为如下： 修改httpd.conf #vim httpd.conf 在文件的最后，添加以下内容 &lt;VirtualHost 192.168.0.63:80&gt; ServerAdmin webmaster@dummy-host.example.com DocumentRoot /var/www/html/ ServerName dummy-host.example.com ErrorLog logs/dummy-host.example.com-error_log CustomLog logs/dummy-host.example.com-access_log common &lt;/VirtualHost&gt; &lt;VirtualHost 192.168.0.56:80&gt; ServerAdmin webmaster@dummy-host.example.com DocumentRoot /var/www/html/bbs/ ServerName dummy-host.example.com ErrorLog logs/dummy-host.example.com-error_log CustomLog logs/dummy-host.example.com-access_log common &lt;/VirtualHost&gt;","tags":[{"name":"CentOS6.8","slug":"CentOS6-8","permalink":"http://cyysu.github.io/tags/CentOS6-8/"},{"name":"Apache服务","slug":"Apache服务","permalink":"http://cyysu.github.io/tags/Apache服务/"}]},{"title":"DNS服务","date":"2017-03-15T11:13:48.445Z","path":"2017/03/15/8.Linux运维服务-DNS服务/","text":"###Linux运维笔记(就老男孩运维28期、马哥教育、学神IT、老段带你学Linux、Linux-Cast整理而来) ##声明 “-“ 后面接的是段落小节标题 笔记按照服务一般配置整理 本文采用软件为 MarkdownPad2进行编辑 本文记录时间 2/27/2017 5:38:32 PM 请将本文ip替换成自己的ip 本文内容如有不当之处，欢迎批评指正 文档书写风格 章节内的小节缩进2个tab，小节内容在章节的基础上缩进1个tab ##本文大纲 1.开篇的话 2.DNS服务 3.案例 1.开篇的话学习Linux服务的大体流程如下 了解服务的作用：名称，功能，特点 安装 配置文件位置，端口 服务启动关闭的脚本 此服务的使用方法 修改配置文件，实战举例 排错(从下到上，从内到外) 2.DNS服务简介 工作原理 DNS服务概述： DNS（Domain Name System）域名系统，在TCP/IP 网络中有非常重要的地位，能够提供域名与IP地址的解析服务。 DNS 是一个分布式数据库，命名系统采用层次的逻辑结构，如同一棵倒置的树，这个逻辑的树形结构称为域名空间，由于DNS 划分了域名空间，所以各机构可以使用自己的域名空间创建DNS信息。 注：DNS 域名空间中，树的最大深度不得超过127 层，树中每个节点最长可以存储63 个字符。 基础知识 1、域和域名 DNS 树的每个节点代表一个域，通过这些节点，对整个域名空间进行划分，成为一个层次结构。 域名空间的每个域的名字，通过域名进行表示。 域名：通常由一个完全合格域名（FQDN）标识。FQDN能准确表示出其相对于DNS 域树根的位置，也就是节点到DNS 树根的完整表述方式，从节点到树根采用反向书写，并将每个节点用“.”分隔，对于DNS 域google 来说，其完全正式域名（FQDN） 为google.com。 例如，google为com域的子域，其表示方法为google.com，而www为google域中的子域，可以使用www.google.com表示。 注意：通常，FQDN 有严格的命名限制，长度不能超过256 字节，只允许使用字符a-z,0-9,A-Z 和减号（-）。点号（.）只允许在域名标志之间（例如“google.com”）或者FQDN 的结尾使用。 域名不区分大小。 由最顶层到下层，可以分成：根域、顶级域、二级域、子域。 Internet 域名空间的最顶层是根域（root），其记录着Internet 的重要DNS 信息，由Internet域名注册授权机构管理，该机构把域名空间各部分的管理责任分配给连接到Internet 的各个组织。 “.”全球有13个根(root)服务器 DNS 根域下面是顶级域，也由Internet 域名注册授权机构管理。共有3 种类型的顶级域。 组织域：采用3 个字符的代号，表示DNS 域中所包含的组织的主要功能或活动。比如com 为商业机构组织，edu 为教育机构组织，gov 为政府机构组织，mil 为军事机构组织，net 为网络机构组 织，org 为非营利机构组织，int 为国际机构组织。 地址域：采用两个字符的国家或地区代号。如cn 为中国，kr 为韩国，us 为美国。 反向域：这是个特殊域，名字为in-addr.arpa，用于将IP 地址映射到名字（反向查询）。 对于顶级域的下级域，Internet 域名注册授权机构授权给Internet 的各种组织。当一个组织获得了对域名空间某一部分的授权后，该组织就负责命名所分配的域及其子域，包括域中的计算机和其他设备，并管理分配的域中主机名与IP 地址的映射信息。 2、区(Zone) 区是DNS 名称空间的一部分，其包含了一组存储在DNS 服务器上的资源记录。 使用区的概念，DNS 服务器回答关于自己区中主机的查询，每个区都有自己的授权服务器。 3、主域名服务器与辅助域名服务器 当区的辅助服务器启动时，它与该区的主控服务器进行连接并启动一次区传输，区辅助服务器定期与区主控服务器通信，查看区数据是否改变。如果改变了，它就启动一次数据更新传输。 每个区必须有主服务器，另外每个区至少要有一台辅助服务器，否则如果该区的主服务器崩溃了，就无法解析该区的名称。 辅助服务器的优点： 1）容错能力 配置辅助服务器后，在该区主服务器崩溃的情况下，客户机仍能解析该区的名称。一般把区的主 服务器和区的辅助服务器安装在不同子网上，这样如果到一个子网的连接中断，DNS 客户机还能 直接查询另一个子网上的名称服务器。 2）减少广域链路的通信量 如果某个区在远程有大量客户机，用户就可以在远程添加该区的辅助服务器，并把远程的客户机 配置成先查询这些服务器，这样就能防止远程客户机通过慢速链路通信来进行DNS 查询。 3）减轻主服务器的负载 辅助服务器能回答该区的查询，从而减少该区主服务器必须回答的查询数。 4、DNS 相关概念 1）DNS 服务器 运行DNS 服务器程序的计算机，储存DNS 数据库信息。DNS 服务器会尝试解析客户机的查询请求。 在解答查询时，如果DNS 服务器能提供所请求的信息，就直接回应解析结果，如果该DNS 服务器 没有相应的域名信息，则为客户机提供另一个能帮助解析查询的服务器地址，如果以上两种方法 均失败，则回应客户机没有所请求的信息或请求的信息不存在。 2）DNS 缓存 DNS 服务器在解析客户机请求时，如果本地没有该DNS 信息，则可以会询问其他DNS 服务器，当 其他域名服务器返回查询结果时，该DNS 服务器会将结果记录在本地的缓存中，成为DNS 缓存。 当下一次客户机提交相同请求时，DNS 服务器能够直接使用缓存中的DNS 信息进行解析。 5、DNS查询工作流程 &lt;1&gt; 客户机提交域名解析请求，并将该请求发送给本地的域名服务器。 &lt;2&gt; 当本地的域名服务器收到请求后，就先查询本地的缓存。如果有查询的DNS 信息记录，则直 接返回查询的结果。如果没有该记录，本地域名服务器就把请求发给根域名服务器。 &lt;3&gt; 根域名服务器再返回给本地域名服务器一个所查询域的顶级域名服务器的地址。 &lt;4&gt; 本地服务器再向返回的域名服务器发送请求。 &lt;5&gt; 接收到该查询请求的域名服务器查询其缓存和记录，如果有相关信息则返回客户机查询结 果，否则通知客户机下级的域名服务器的地址。 &lt;6&gt; 本地域名服务器将查询请求发送给返回的DNS 服务器。 &lt;7&gt; 域名服务器返回本地服务器查询结果（如果该域名服务器不包含查询的DNS 信息，查询过程 将重复&lt;6&gt;、&lt;7&gt;步骤，直到返回解析信息或解析失败的回应）。 &lt;8&gt; 本地域名服务器将返回的结果保存到缓存，并且将结果返回给客户机。 6、查询方式 1）递归查询 递归查询是一种DNS 服务器的查询模式，在该模式下DNS 服务器接收到客户机请求，必须使用一 个准确的查询结果回复客户机。如果DNS 服务器本地没有存储查询DNS 信息，那么该服务器会询 问其他服务器，并将返回的查询结果提交给客户机。 2）迭代查询 DNS 服务器另外一种查询方式为迭代查询，当客户机发送查询请求时，DNS 服务器并不直接回复查 询结果，而是告诉客户机另一台DNS 服务器地址，客户机再向这台DNS 服务器提交请求，依次循环直到返回查询的结果为止。 7、正向解析和反向解析 1）正向解析 正向解析是指域名到IP 地址的解析过程。 2）反向解析 反向解析是从IP 地址到域名的解析过程。反向解析的作用为服务器的身份验证。[http://dns.aizhan.com/](http://dns.aizhan.com/ &quot;反向解析网址&quot;) 服务安装、启动和配置 服务安装 yum install bind bind-chroot bind-utils -y bind-9.7.3-8.P3.el6.x86_64.rpm #该包为DNS 服务的主程序包。 bind-chroot-9.7.3-8.P3.el6.x86_64.rpm # 提高安全性。 #bind-chroot是bind的一个功能,使bind可以在一个chroot 的模式下运行.也就是说,bind运行时的/(根)目录,并不是系统真正的/(根)目录,只是系统中的一个子目录而已.这样做的目的是为了提高安全性.因为在chroot的模式下,bind可以访问的范围仅限于这个子目录的范围里,无法进一步提升,进入到系统的其他目录中. bind-utils-9.7.3-8.P3.el6.x86_64.rpm #该包为客户端工具，默认安装，用于搜索域名指令。 服务启动、端口检测和加入开机启动项 cat /etc/services | grep 53,593 ls /etc/named.conf /etc/named.conf named.conf 是BIND 的核心配置文件，它包含了BIND 的基本配置，但其并不包括区域数据。 /etc/init.d/named restart #重启服务 netstat -antup | grep 53 #查看端口 服务配置 开启named服务后，/var/named/chroot/目录下的文件会自动挂载，调用chroot功能切换根： 配置DNS服务器解析： xuegod.cn vim /var/named/chroot/etc/named.conf #启动服务后，尽量使用这个路径。 整体分3段 zone ： 针对某个区域生效 重点说一下type参数： type 字段指定区域的类型，对于区域的管理至关重要，一共分为六种： 1)Master：主DNS 服务器：拥有区域数据文件，并对此区域提供管理数据 2)Slave：辅助DNS 服务器：拥有主DNS 服务器的区域数据文件的副本，辅助DNS 服务器会从主DNS服务器同步所有区域数据。 3)Stub：stub 区域和slave 类似，但其只复制主DNS 服务器上的NS 记录而不像辅助DNS 服务器会复制所有区域数据。 4)Forward：一个forward zone 是每个域的配置转发的主要部分。一个zone 语句中的type forward可以包括一个forward 和/或forwarders 子句，它会在区域名称给定的域中查询。如果没有forwarders 语句或者forwarders 是空表，那么这个域就不会有转发，消除了options 语句中有关转发的配置。 5)Hint：根域名服务器的初始化组指定使用线索区域hint zone，当服务器启动时，它使用根线索来查找根域名服务器，并找到最近的根域名服务器列表。 配置正向解析区域 授权DNS 服务器管理xuegod.cn 区域，并把该区域的区域文件命名为xuegod.cn 3.案例例1： 分析： 方案：","tags":[{"name":"CentOS6.8","slug":"CentOS6-8","permalink":"http://cyysu.github.io/tags/CentOS6-8/"},{"name":"DNS服务","slug":"DNS服务","permalink":"http://cyysu.github.io/tags/DNS服务/"}]},{"title":"FTP服务","date":"2017-03-15T11:13:48.326Z","path":"2017/03/15/7.Linux运维服务-FTP服务/","text":"Linux运维笔记(就老男孩运维28期、马哥教育、学神IT、老段带你学Linux、Linux-Cast整理而来)声明 “-“ 后面接的是段落小节标题 笔记按照服务一般配置整理 本文采用软件为 MarkdownPad2进行编辑 本文记录时间 2/27/2017 5:38:32 PM 请将本文ip替换成自己的ip 本文大纲1.开篇的话 2.FTP服务 1.开篇的话学习Linux服务的大体流程如下 了解服务的作用：名称，功能，特点 安装 配置文件位置，端口 服务启动关闭的脚本 此服务的使用方法 修改配置文件，实战举例 排错(从下到上，从内到外) 2.FTP服务简介 FTP服务器（File Transfer Protocol Server）是在互联网上提供文件存储和访问服务的计算机，它们依照FTP协议提供服务。 FTP（File Transfer Protocol: 文件传输协议）作用： Internet 上用来传送文件的协议 常见FTP服务器： windows：Serv-U FTP Server Linux：ProFTPD:（Professional FTP daemon）一个Unix平台上或是类Unix平台上（如Linux, FreeBSD等）的FTP服务器程序。 VSFTP是一个基于GPL发布的类Unix系统上使用的FTP服务器软件，它的全称是Very Secure FTP 从此名称可以看出来，编制者的初衷是代码的安全。 特点： 它是一个安全、高速、稳定的FTP服务器； 模式： C/S 模式 20 (传数据) 21 (传指令) fsp（File Service Protocol）： 文件服务协议。 ftp分为主动模式和被动模式 这里的主动和被动，是相对于的FTP server 端来判断的。无论是被动还是主动模式，首先的控制通道都是先建立起来的，只有在数据传输模式上有区别 工作原理 1.主动模式工作原理 FTP客户端链接到FTP服务器的21端口，发送用户名和密码，客户端随机开放一个端口(1024以上)发送PORT命令到FTP服务器，告诉服务器客户端采用主动模式开放端口；FTP服务器收到PORT主动模式命令和端口号后，通过服务器的20端口和客户端开放的端口链接，发送数据，原理如下： 客户端 服务器 FTP链接请求(用户名，密码，port端口) --------------------------------------&gt; 服务器相应(ACK) 服务端21号和客户端端口建立回话连接通道 &lt;--------------------------------------- FTP服务器从自己的20号端口连接客户端指定端口连接请求为主动模式 &lt;------------------------------------------------- 最后客户端发送ACK确认，开始数据传输 -------------------------------------------------&gt; 2.被动模式工作原理 FTP客户端链接到FTP服务器的21端口，发送用户名和密码，发送PASV命令到FTP服务器，服务器在本地随机开放一个端口(1024以上)，然后把开放的端口告诉客户端，客户端在链接到服务器开放的端口进行连接。原理如下： 客户端 服务器 FTP连接请求(包括用户名，密码，发送被动链接PASV) -----------------------------------------&gt; ftp服务器响应ACK，服务器21号和客户端高位随机端口 进行回话连接，建立通道。同时服务器告诉了客户端服 务器开放的端口 &lt;----------------------------------------- 客户端从自己中的一个高位端口链接服务器开放的端口 ------------------------------------------------------&gt; 服务器发送ACK响应给客户端，进行数据传输 &lt;------------------------------------------------------ 服务安装、启动和配置 服务安装 yum -y install vsftpd lftp 注：从RHEL6开始，系统镜像中默认没有ftp客户端命令。取而代之的是lftp命令 Linux客户端： lftp 是一个功能强大的下载工具，它支持访问文件的协议: ftp, ftps, http, https, hftp, fish.(其中ftps和https需要在编译的时候包含openssl库)。llftp的界面非常好一个shell: 有命令补全，历史记录，允许多个后台任务执行等功能，使用起来非常方便。它还有书签、排队、镜像、断点续传、多进程下载等功能。 服务启动和端口检测(注意将防火墙和selinux关闭) service vsftpd restart chkconfig vsftpd on netstat -antup | grep ftp 这里我们会发现看不到20端口，那是因为服务器和客户端没有进行通信 服务配置 /etc/vsftpd/vsftpd.conf：vsftpd 的核心配置文件 /etc/vsftpd/ftpusers：用于指定哪些用户不能访问FTP 服务器。 黑名单 /etc/vsftpd/user_list：指定允许使用vsftpd 的用户列表文件。 白名单 vim /etc/vsftpd/user_list /etc/vsftpd/vsftpd_conf_migrate.sh：是vsftpd 操作的一些变量和设置脚本 /var/ftp/：默认情况下匿名用户的根目录 案例 例1：公司技术部准备搭建一台功能简单的FTP 服务器，允许所有员工上传和下载文件，并允许创建用户自己的目录 分析： 允许所有员工上传和下载文件需要设置成允许匿名用户登录并且需要将允许匿名用户上传功能开启， 方案： cp vsftpd.conf vsftpd.conf.back vim /etc/vsftpd/vsftpd.conf #修改以下内容 #允许匿名用户访问 anonymous_enable=YES #允许匿名用户上传文件并可以创建目录 anon_upload_enable=YES #字段可以控制是否允许匿名用户创建目录 anon_mkdir_write_enable=YES 例2：公司内部现在有一台FTP 和WEB 服务器，FTP 的功能主要用于维护公司的网站内容，包括上传文件、创建目录、更新网页等等。公司现有两个部门负责维护任务，他们分别适用team1 和team2帐号进行管理。先要求仅允许team1 和team2 帐号登录FTP 服务器，但不能登录本地系统，并将这两个帐号的根目录限制为/var/www/html，不能进入该目录以外的任何目录 分析： 将FTP 和WEB 服务器做在一起是企业经常采用的方法，这样方便实现对网站的维护，为了增强安 全性，首先需要使用仅允许本地用户访问，并禁止匿名用户登录。其次使用chroot 功能将team1 和team2 锁定在/var/www/html 目录下。如果需要删除文件则还需要注意本地权限 方案： 1）建立维护网站内容的ftp 帐号team1 和team2 并禁止本地登录，然后设置其密码 [root@xuegod63 ~]# useradd -s /sbin/nologin team1 [root@xuegod63 ~]# useradd -s /sbin/nologin team2 [root@xuegod63 ~]# echo &quot;123456&quot; | passwd --stdin team1 Changing password for user team1. passwd: all authentication tokens updated successfully. [root@xuegod63 ~]# echo &quot;123456&quot; | passwd --stdin team2 Changing password for user team2. passwd: all authentication tokens updated successfully. 2）配置vsftpd.conf 主配置文件并作相应修改 [root@xuegod63 vsftpd]# cp vsftpd.conf.back vsftpd.conf vim /etc/vsftpd/vsftpd.conf anonymous_enable=NO：禁止匿名用户登录 local_enable=YES：允许本地用户登录 local_root=/var/www/html chroot_list_enable=YES chroot_list_file=/etc/vsftpd/chroot_list #local_root=/var/www/html #设置本地用户的根目录为/var/www/html #chroot_list_enable=YES #激活chroot功能 #chroot_list_file=/etc/vsftpd/chroot_list #设置锁定用户在根目录中的列表文件。此文件存放要锁定的用户名 3）建立/etc/vsftpd/chroot_list 文件，添加team1 和team2 帐号 [root@xuegod63 vsftpd]# touch /etc/vsftpd/chroot_list [root@xuegod63 ~]# ll !$ ll /etc/vsftpd/chroot_list -rw-r--r-- 1 root root 0 Nov 10 17:08 /etc/vsftpd/chroot_list [root@xuegod63 ~]# vim /etc/vsftpd/chroot_list #写入以下内容，一行，一个用户名 team1 team2 4）重启vsftpd 服务使配置生效 service vsftpd restart 5）修改本地权限 [root@xuegod63 ~]# ll -d /var/www/html/ drwxr-xr-x. 2 root root 4096 Oct 6 2011 /var/www/html/ [root@xuegod63 ~]# chmod -R o+w /var/www/html/ [root@xuegod63 ~]# ll -d /var/www/html/ drwxr-xrwx. 2 root root 4096 Oct 6 2011 /var/www/html/ 例3:公司为了宣传最新的产品信息，计划搭建FTP 服务器，为客户提供相关文档的下载。对所有互联网开放共享目录，允许下载产品信息，禁止上传。公司的合作单位能够使用FTP 服务器进行上传和下载，但不可以删除数据。需要保证服务器的稳定性并做优化。创建ftp虚拟帐号。允许客户使用ftp帐号下载文件。 但是，你们自己的合作伙伴帐号：vip可以上传一内部文件 分析: 根据企业的需求，对于不同用户进行不同的权限限制，FTP 服务器需要实现用户的审核。需考虑 到服务器的安全性，所以关闭实体用户登录，使用虚拟帐号验证机制，并对不同虚拟帐号设置不 同的权限。为了保证服务器的性能，还需要根据用户的等级，限制客户端的连接数及下载速度。 方案： 1、创建用户数据库 1）创建用户文本文件 先建立用户文本文件vsftpd_virtualuser.txt，添加两个虚拟帐号，公共帐号ftp 及客户帐号 vip [root@xuegod63 vsftpd]# vim /etc/vsftpd/vsftpd_virtualuser.txt #写入以下内容。格式一行用户一行密码 ftp #客户用户 123456 #密码 vip #合作伙伴 123456 2）生成数据库 保存虚拟帐号和密码的文本文件无法被系统帐号直接调用。我们需要使用db_load 命令生成db数据库文件 [root@xuegod63 vsftpd]# rpm -qf `which db_load ` db4-utils-4.7.25-16.el6.x86_64 # db_load -T -t hash -f /etc/vsftpd/vsftpd_virtualuser.txt /etc/vsftpd/vsftpd_virtualuser.db 参数说明： 选项-T允许应用程序能够将文本文件转译载入进数据库。 由于我们之虚拟用户信息，以文本文件存储的。为让Vsftpd应用程序能够通过来载入用户数据，必须要使用选项来转译成vsftpd可以读懂的内容 -t hash使用hash码加密 -f 指定包含用户名和密码文本文件。此文件格式要示：奇数行用户名、偶数行密码 [root@xuegod63 vsftpd]# rm -rf /etc/vsftpd/vsftpd_virtualuser.txt #为了安全，删除此文件。后期不再使用此文件。 3）修改数据库文件访问权限 数据库文件中保存着虚拟帐号的密码信息，为了防止非法用户盗取哈，我们可以修改该文件的访问权限。生成的认证文件的权限应设置为只对root用户可读可写，即600 [root@xuegod63 vsftpd]# chmod 600 /etc/vsftpd/vsftpd_virtualuser.db [root@xuegod63 vsftpd]# ll !$ ll /etc/vsftpd/vsftpd_virtualuser.db -rw------- 1 root root 12288 Nov 10 21:16 /etc/vsftpd/vsftpd_virtualuser.db 2、配置PAM 文件 为了使服务器能够使用数据库文件，对客户端进行身份验证，需要调用系统的PAM 模块. PAM(Plugable Authentication Module)为可插拔认证模块，不必重新安装应用系统，通过修 改指定的配置文件，调整对该程序的认证方式。PAM 模块配置文件路径为/etc/pam.d/目录，此 目录下保存着大量与认证有关的配置文件，并以服务名称命名。 修改vsftpd 对应的PAM 配置文件/etc/pam.d/vsftpd。将默认配置使用“#”全部注释，添加两行应字段。 [root@xuegod63 vsftpd]# cat /etc/pam.d/vsftpd ##%PAM-1.0 #session optional pam_keyinit.so force revoke #auth required pam_listfile.so item=user sense=deny file=/etc/vsftpd/ftpusers onerr=succeed #auth required pam_shells.so #auth include password-auth #account include password-auth #session required pam_loginuid.so #session include password-auth auth required /lib64/security/pam_userdb.so db=/etc/vsftpd/vsftpd_virtualuser account required /lib64/security/pam_userdb.so db=/etc/vsftpd/vsftpd_virtualuser 注意：这里的db=/etc/vsftpd/vsftpd_virtualuser是pam文件的写法规范，不是真正指向db=/etc/vsftpd/vsftpd_virtualuser 这个文件，而是/etc/vsftpd/vsftpd_virtualuser.db 文件。与此同时还需要注意的是db=数据库中的数据库不用写出拓展名 3、创建虚拟帐号对应的系统用户及ftp共享的目录 对于公共帐号和客户帐号，因为需要配置不同的权限，所以可以将两个帐号的目录进行隔离，控 制用户的文件访问。公共帐号ftp 对应系统帐号ftpuser，并指定其主目录为/var/ftp/share， 而客户帐号vip 对应系统帐号ftpvip，指定主目录为/var/ftp/vip。 [root@xuegod63 vsftpd]# useradd -d /var/ftp/share ftpuser [root@xuegod63 vsftpd]# useradd -d /var/ftp/vip ftpvip [root@xuegod63 vsftpd]# chmod -R 500 /var/ftp/share/ #修改权限 [root@xuegod63 vsftpd]# chmod -R 700 /var/ftp/vip/ chmod -R 500 /var/ftp/share/ ：公共帐号ftp 只允许下载，修改share 目录其他用户权限为rx 可读可执行。 chmod -R 700 /var/ftp/vip/ ：客户帐号vip 允许上传和下载，所以对vip 目录权限设置为rwx， 可读可写可执行。 注：如果不设置可执行用户登录会出不能更改目录错误。 4、建立配置文件 互动：如何设置多个虚拟帐号的不同权限？ 以前都配置好服务后，对所有用户有效。现在需要对不同用户配置不同的权限。 怎么办？ 一个配置文件无法实现此功能，需要为每个虚拟帐号建立独立的配置文件，并根据需要进行相应的设置。 1）修改vsftpd.conf 主配置文件 配置主配置文件/etc/vsftpd/vsftpd.conf 添加虚拟帐号的共同设置并添加user_config_dir 字段，定义虚拟帐号的配置文件目录。 开始配置： [root@xuegod63 vsftpd]# cp vsftpd.conf.back vsftpd.conf 禁用匿名用户登录并启用本地用户登录设置 vim vsftpd.conf 改： anonymous_enable=YES 为： anonymous_enable=NO local_enable=YES #确认此选项打开，允许本地用户登录。 Uncomment ：取消注释 chroot_local_user=YES #确认此选项打开。将所有本地用户限制在家目录中，NO 则不限制 pam_service_name=vsftpd #确认在文件的最后有选项。配置vsftpd 使用的PAM 模块为vsftpd 在此选项后面追加： user_config_dir=/etc/vsftpd/vuserconfig #设置虚拟帐号的主目录为/vuserconfig max_clients=300 #设置FTP 服务器最大接入客户端数为300 个 max_per_ip=10 #设置每个IP 地址最大连接数为10 个 2）建立虚拟帐号配置文件 在user_config_dir 指定路径下，建立与 **虚拟帐号** 同名 的配置文件并添加相应的配置字段 首先建立公共帐号ftp 的配置文件 [root@xuegod63 ~]# grep vuserconfig /etc/vsftpd/vsftpd.conf #查看要创建的目录名 user_config_dir=/etc/vsftpd/vuserconfig [root@xuegod63 ~]# mkdir /etc/vsftpd/vuserconfig [root@xuegod63 ~]# touch /etc/vsftpd/vuserconfig/ftp [root@xuegod63 ~]# touch /etc/vsftpd/vuserconfig/vip 下面是客户的虚拟账号配置文件 [root@xuegod63 ~]# vim /etc/vsftpd/vuserconfig/ftp guest_enable=yes guest_username=ftpuser anon_world_readable_only=no anon_max_rate=50000 解释： guest_enable=yes：开启虚拟帐号登录 guest_username=ftpuser：设置ftp 对应的系统帐号为ftpuser anon_world_readable_only=no：允许匿名用户浏览整个服务器的文件系统 anon_max_rate=50000：限定传输速率为50KB/s 注意： vsftpd 对于文件传输速度限制并不是绝对锁定在一个数值上哈，而是在80%~120%之间变化 比如设置100KB/s 则实际是速度在80KB/s~120KB/s 之间变化 下面是合作伙伴的虚拟账号配置文件 [root@xuegod63 ~]# vim /etc/vsftpd/vuserconfig/vip #写入以下内容 guest_enable=yes guest_username=ftpvip anon_world_readable_only=no write_enable=yes anon_mkdir_write_enable=yes anon_upload_enable=yes anon_max_rate=100000 解释： guest_enable=yes：开启虚拟帐号登录 guest_username=ftpvip：设置ftp 对应的系统帐号为ftpvip anon_world_readable_only=no：允许匿名用户浏览器整个服务器的文件系统 write_enable=yes：允许在文件系统写入权限 anon_mkdir_write_enable=yes：允许创建文件夹 anon_upload_enable=yes：开启匿名帐号的上传功能 anon_max_rate=100000：限定传输速度为100KB/s 5、重启 vsftpd 使配置生效 [root@xuegod63 ~]# service vsftpd restart 回顾配置文件参数 anonymous_enable=YES #启用匿名用户（anonymous、ftp） local_enable=YES #本地用户、启用 write_enable=YES #本地用户、可写 #anon_upload_enable=YES #匿名用户可写 #anon_mkdir_write_enable=YES #匿名用户可以创建目录 #idle_session_timeout=600 #超时时间 #data_connection_timeout=120 #超时时间 listen=YES #是否监听 pam_service_name=vsftpd #开启pam支持 userlist_enable=YES #用户列表功能开启 tcp_wrappers=YES #开始tcp_wrappers支持 userlist_deny=NO #黑名单变白名单 #锁定用户访问的目录： chroot_local_user=NO chroot_list_enable=YES chroot_list_file=/etc/vsftpd/chroot_list #写谁锁谁 chroot_local_user=YES chroot_list_enable=YES chroot_list_file=/etc/vsftpd/chroot_list #写谁不锁谁 #其他功能： #匿名用户可以重命名和删除： #虚拟账号 pam认证 anon_other_write_enable＝YES bind IP listen_address=IP local_max_rate=N anon_max_rate=N max_client=N max_per_ip=N","tags":[{"name":"CentOS6.8","slug":"CentOS6-8","permalink":"http://cyysu.github.io/tags/CentOS6-8/"},{"name":"FTP服务","slug":"FTP服务","permalink":"http://cyysu.github.io/tags/FTP服务/"}]},{"title":"Samba服务","date":"2017-03-15T11:13:48.255Z","path":"2017/03/15/6.Linux运维服务-Samba服务/","text":"Linux运维笔记(就老男孩运维28期、马哥教育、学神IT、老段带你学Linux、Linux-Cast整理而来)声明 “-“ 后面接的是段落小节标题 笔记按照服务一般配置整理 本文采用软件为 MarkdownPad2进行编辑 本文记录时间 2/27/2017 5:38:32 PM 请将本文ip替换成自己的ip 本文大纲1.开篇的话 2.Samba服务 3.常见错误解决方案 4.应用场景 1.开篇的话学习Linux服务的大体流程如下 了解服务的作用：名称，功能，特点 安装 配置文件位置，端口 服务启动关闭的脚本 此服务的使用方法 修改配置文件，实战举例 排错(从下到上，从内到外) 2.Samba服务简介 Samba服务概述： Samba 最先在Linux 和Windows 两个平台之间架起了一座桥梁，正是由于Samba 的出现，我们可以在Linux 系统和Windows 系统之间互相通信，比如拷贝文件、实现不同操作系统之间的资源共享等等，我们可以将其架设成一个功能非常强大的文件服务器，也可以将其架设成打印服务器提供本地和远程联机打印 软件安装和启动 软件安装 rpm -ivh /mnt/Packages/samba-3.5.10-114.el6.x86_64.rpm 服务启动 service smb start 或 /etc/init.d/smb restart samba 服务配置重新加载 /etc/init.d/smb reload 服务加入开机自启 chkconfig smb on 查看端口 netstat -antup | grep smb windows访问samba服务的时候采用如下格式访问 \\\\192.168.1.63 Linux访问的时候共享文件夹采用如下格式 smbclient -L samba IP 密码为空 这样查看的方式为匿名用户 smbclient -L samba IP -U 用户名%密码 以用户名查看samba共享文件 smbclient //samba共享的绝对路径 -U 用户名%密码 如果登陆出现问题可以尝试清除一下缓存 (windows平台) net use * /del //显示已建立的远程连接并询问是否确认删除，输入y删除，输入n暂不删除 配置文件解析 配置文件详解：/etc/samba/smb.conf 1、samba 配置简介 smb.conf 文件的开头部分为samba 配置简介，告诉我们smb.conf 文件的作用及相关信息。 smb.conf 中还有以“;”开头，这些都是samba 配置的格式范例，默认是不生效滴，可以通过去掉前面的“;”并加以修改来设置想使用的功能。 [root@xuegod63 ~]# vim /etc/samba/smb.conf #搜索分号 ； ; security = domain 另外#号也是表示注示 2、Global Settings Global Settings 设置为全局变量区域。全局变量就是说我们只要在global 时进行设置，那么该设置项目就是针对所有共享资源生效。这与以后我们学习的很多服务器配置文件相似。 格式： 字段=设定值 下面我们说下[global]常用字段及设置方法： 1）设置samba 服务器所在工作组或域名 我们设置samba 服务器的工作组为xuegod.cn workgroup = xuegod.cn #工作组 2）服务器描述，服务器描述实际上类似于备注信息， 设置samba 描述信息为“xuegod.cn Samba Server ”。 server string = xuegod.cn Samba Server #samba服务器描述 3、设置samba 服务器安全模式。常见模式有两种：share 安全级别模式和user 安全级别模式 samba 服务器有share、user、server、domain 和AD活动目录 五种安全模式。 （1）share 安全级别模式 客户端登录samba 服务器，不需要输入用户名和密码就可以浏览samba 服务器的资源，适用于公 共的共享资源，安全性差，需要配合其他权限设置，保证samba 服务器的安全性。 （2）user 安全级别模式 客户端登录samba 服务器，需要提交合法帐号和密码，经过服务器验证才可以访问共享资源，服务器默认为此级别模式。 4、Share Definitions 共享服务的定义 [homes]为特殊共享目录，表示用户主目录。 [printers]表示共享打印机。 修改配置文件，实战举例： Samba 常规服务器配置 基本的Samba服务器的搭建流程主要分为四个步骤： [1]、编辑主配置文件smb.conf,指定需要共享的目录，并为共享目录设置共享权限。 [2]、在smb.conf 文件中指定日志文件名称和存放路径。 [3]、设置共享目录的本地系统权限及samba共享权限。 [4]、重新加载配置文件或重新启动smb 服务，使用配置生效 配置一个共享资源： [share] #设置共享名 comment = Home Directories #描述 browseable = yes #是否允许查看此共享内容 。如果是否，后期通过绝对路径，可以查看到。 path = /share #共享路径，写绝对路径 public = yes #允许匿名查看 readonly = yes 5、设置访问用户 如果共享资源存在重要数据的话，需要对访问用户审核，我们可以使用valid users 字段进行设置 格式： valid users = 用户名 valid users = @组名 6、设置目录只读 共享目录如果限制用户的读写操作，我们可以通过readonly 实现哈~ 格式： readonly = yes #只读 readonly = no #读写 7、设置目录可写 如果共享目录允许用户写操作，可以使用writable 或write list 两个字段进行设置 writable 格式： writable = yes #读写 writable = no #只读 write list 格式： write list = 用户名 write list = @组名 Samba 服务日志文件 在/etc/samba/smb.conf 文件中，log file 为设置samba 日志的字段。 案例 例1：匿名共享： 公司现在用一个工作组xuegod.cn， 需要添加samba 服务器作为文件服务器，并发布共享目录/share，共享名为public,这个共享目录允许所有公司员工访问。 [root@xuegod63 Desktop]# mkdir /share [root@xuegod63 Desktop]# cp /etc/passwd !$ #复制一个测试文件 cp /etc/passwd /share vim /etc/samba/smb.conf [global] workgroup = xuegod.cn #工作组 server string = xuegod.cn Samba Server #samba服务器描述 security = share # 允许匿名访问 ============================ Share Definitions ==== [share] #设置共享名 comment = Home Directories #描述 path = /share #共享路径，写绝对路径 public = yes #允许匿名查看 2）重新加载配置 service smb restart 例2：通过用户名和密码共享文件。把/sales 共享出去，只有知道用户名和密码的同事可以看这个共享。我们需要将全局配置中security 设置user 安全级别，然后在共享目录设置权限 注意：一定要先指定存放密码的文件位置： 1）添加销售部用户和组并添加相应samba 帐号 使用groupadd 命令添加sales 组，然后执行useradd 命令和passwd 命令添加销售部员工的帐号及密码。 [root@xuegod63 samba]# groupadd sales [root@xuegod63 samba]# useradd -g sales sale1 [root@xuegod63 samba]# useradd -g sales sale2 [root@xuegod63 samba]# id sale2 uid=501(sale2) gid=500(sales) groups=500(sales) [root@xuegod63 samba]# 接下来为销售部成员添加相应samba 帐号 [root@xuegod63 samba]# smbpasswd -a sale1 New SMB password: Retype new SMB password: startsmbfilepwent_internal: file /etc/samba/smbpasswd did not exist. File successfully created. Added user sale1. [root@xuegod63 samba]# ls /etc/samba/smbpasswd /etc/samba/smbpasswd [root@xuegod63 samba]# cat !$ cat /etc/samba/smbpasswd sale1:500:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:32ED87BDB5FDC5E9CBA88547376818D4:[U ]:LCT-545E2105: [root@xuegod63 samba]# smbpasswd -a sale2 New SMB password: Retype new SMB password: Added user sale2. 2）修改samba 主配置文件smb.conf passdb backend = smbpasswd smb passwd file = /etc/samba/smbpasswd 例3:linux访问Windows共享文件的方法 1、安装Samba服务 yum install samba samba-client samba-swat 2、启动Samba服务器 /etc/init.d/smb restart 3、安装cifs-utils，解决只读挂载 yum install cifs-utils.x86_64 4、把Windows共享文件夹挂载到linux 目录下 mount -t cifs -o username=cnt01/njpublic,passwd=&apos;Welcome123&apos; //10.60.1.14/Files-Temporary-Transfer /mnt/ 注意挂载的格式： 密码要 写在‘’ 里面， 挂载的目录要写到上一级，//ip/共享文件夹 3.常见错误解决方案第一种问题 第二种问题 4.应用场景1)文件和打印机贡献 文件和打印机共享是Samba 的主要功能，SMB 进程实现资源共享，将文件和打印机发布到网络之中，以供用户可以访问。 2)身份验证和权限设置 smbd 服务支持user mode 和domain mode 等身份验证和权限设置模式，","tags":[{"name":"CentOS6.8","slug":"CentOS6-8","permalink":"http://cyysu.github.io/tags/CentOS6-8/"},{"name":"Samba服务","slug":"Samba服务","permalink":"http://cyysu.github.io/tags/Samba服务/"}]},{"title":"NFS服务","date":"2017-03-15T11:13:48.196Z","path":"2017/03/15/5.Linux运维服务-NFS服务/","text":"###Linux运维笔记(就老男孩运维28期、马哥教育、学神IT、老段带你学Linux、Linux-Cast整理而来) ##声明 “-“ 后面接的是段落小节标题 笔记按照服务一般配置整理 本文采用软件为 MarkdownPad2进行编辑 本文记录时间 2/27/2017 5:38:32 PM 请将本文ip替换成自己的ip 本文大纲1.开篇的话 2.服务 3.常见错误解决方案 4.应用场景 1.开篇的话学习Linux服务的大体流程如下 了解服务的作用：名称，功能，特点 安装 配置文件位置，端口 服务启动关闭的脚本 此服务的使用方法 修改配置文件，实战举例 排错(从下到上，从内到外) 2.NFS服务简介 NFS，是Network File System的简写，即网络文件系统。网络文件系统是FreeBSD支持的文件系统中的一种，也被称为NFS. NFS允许一个系统在网络上与他人共享目录和文件。通过使用NFS，用户和程序可以像访问本地文件一样访问远端系统上的文件。 模式： C/S 模式 端口： RHEL6是以NFSv4作为默认版本，NFSv4使用TCP协议（端口号是2049）和NFS服务器建立连接 软件安装和启动 软件安装 yum -y install nfs* yum install mount #用到showmount命令查看nfs的那些文件实现了贡献 端口检测和服务开启 netstat -antpu | grep 2049 service nfs start 加入开机自启 chkconfig nfs on 查看NFS的贡献目录 showmount -e NFS服务器IP 挂载文件 mount 192.168.1.63:/tmp /opt 触发式挂载 1.自动挂载 vim /etc/fstab 192.168.30.128:/media /opt /nfs defualts 0 0 2.安装软件 autofs yum install autofs -y autofs软件包要实现自动挂载涉及到两个文件，auto.master和auto.misc /etc/auto.master 文件定义本地挂载点. /etc/auto.misc 配置文件是用来设置需要挂载的文件系统类型和选项 cd -fstype=iso9660,ro,nosuid,nodev :/dev/cdrom * -fstype=nfs,rw 192.168.0.62:/media 服务器端没有必要安装autofs 客户端安装nfs 重启服务 service autofs restart 配置文件解析 配置文件 vim /etc/exports /media *(rw) 贡献目录 配置文件的简单配置 /tmp/a/no_root_squash *(rw,no_root_squash) /tmp/a/sync 192.168.0.0/24(rw,sync) /tmp/a/ro 192.168.1.64(ro) /tmp/a/all_squash 192.168.0.0/24(rw,all_squash,anonuid=500,anongid=500) /tmp/a/async 192.168.3.0/255.255.255.0(async) /tmp/a/rw 192.168.3.0/255.255.255.0(rw) 192.168.4.0/255.255.255.0(rw) /tmp/a/root_squash *(rw,root_squash) * 表示所有网段 sync/async:数据同步写入硬盘/不同步写入在内存中缓存 root_squash（压制）：如果用root登录nfs，使其身份自动切换成nfsnobody。 no_root_squash：如果用root登录nfs，使其身份就是root。 all_squash：用户登录nfs时，指定身份为UID/GID的用户。 注意：在发布共享目录的格式中除了共享目录是必跟参数外，其他参数都是可选的。并且共享 目录与客户端之间及客户端与客户端之间需要使用空格符号，但是客户端与参数之间是不能有 空格的 查看NFS的贡献目录 showmount -e NFS服务器IP 3.常见错误解决方案第一种问题：共享目录之后无法创建文件 1、可能是服务器端文件自身的读写权限设置问题 chmod 777 -R /贡献目录 2、chown nfsnobody:nfsnobody /共享目录 第二种问题： 4.应用场景1)文件共享","tags":[{"name":"CentOS6.8","slug":"CentOS6-8","permalink":"http://cyysu.github.io/tags/CentOS6-8/"},{"name":"NFS服务","slug":"NFS服务","permalink":"http://cyysu.github.io/tags/NFS服务/"}]},{"title":"NTP服务","date":"2017-03-15T11:13:48.154Z","path":"2017/03/15/4.Linux运维服务-NTP服务/","text":"Linux运维笔记(就老男孩运维28期、马哥教育、学神IT、老段带你学Linux、Linux-Cast整理而来)声明 “-“ 后面接的是段落小节标题 笔记按照服务一般配置整理 本文采用软件为 MarkdownPad2进行编辑 本文记录时间 2/27/2017 5:38:32 PM 请将本文ip替换成自己的ip 本文大纲1.开篇的话 2.NTP服务 3.常见错误解决方案 4.应用场景 1.开篇的话学习Linux服务的大体流程如下 了解服务的作用：名称，功能，特点 安装 配置文件位置，端口 服务启动关闭的脚本 此服务的使用方法 修改配置文件，实战举例 排错(从下到上，从内到外) 2.NTP服务-简介 1、原理 NTP（Network Time Protocol，网络时间协议）是用来使计算机时间同步化的一种协议。它可以使计算机对其服务器或时钟源做同步化，它可以提供高精准度的时间校正（LAN上与标准间差小于1毫秒，WAN上几十毫秒），且可介由加密确认的方式来防止恶毒的协议攻击。 模式： C/S 模式 运行模式： 2.服务安装和检查 rpm -ivh /mnt/Packages/ntp-4.2.4p8-2.el6.x86_64.rpm 或 yum -y install ntp* service ntpd start netstat -anutp | grep 123 ntpdate time.windows.com #同步时间 如果自己同步自己的话就会出现如下错误 ntpdate time.windows.com 3.NTP服务器的主要配置文件 /etc/ntp.conf：这个是NTP服务器的主要设文件，也是 NTP 唯一的设定文件 下面重点说说 /etc/ntp.conf文件的设置。在 NTP Server 的设定上面，其实最好不要对 Internet 无限制的开放，尽量仅提供您自己内部的 Client 端联机进行网络校时就好。此外， NTP Server 总也是需要网络上面较为准确的主机来自行更新自己的时间，所以在我们的 NTP Server 上面也要找一部最靠近自己的 Time Server 来进行自我校正。事实上， NTP 这个服务和服务器之间，也是 C/S的一种模式。 NTP服务器实际作用：保证Linux集群中所有所有服务器时间同步。 对于一个Linux集群，集群内的机器保持时间同步是很重要的，不然会出现很多问题。 实例：配置一个本地时间同步服务器 实验前请确保此服务器可以上网 [root@xuegod63 ~]# vim /etc/ntp.conf #修改以下√号标记内容，为自己需要的内存即可 [root@xuegod63 ~]# vim /etc/ntp.conf #修改以下√号标记内容，为自己需要的内存即可 driftfile /var/lib/ntp/drift restrict default kod nomodify notrap nopeer noquery restrict -6 default kod nomodify notrap nopeer noquery restrict 127.0.0.1 restrict -6 ::1 √restrict 192.168.1.0 mask 255.255.255.0 # 允许192.168.1.0这个网段中的服务器，访问ntp服务器同步时间。 √restrict 202.120.2.101 #允许单个IP地址方访问本服务器。 server 202.120.2.101 #指定本NTP服务器的上游NTP服务器为202.120.2.101，并且设置为首先服务器。同步时间为，从上到下，写的越靠上，优先级越高。（写在所有server最前面IP地址为首先服务器，此服务器同步不了时间，寻找下一个NTP服务器）。此IP地址是上海交通大学网络中心NTP服务器地址。 在原配置文件中添加一个外网NTP服务器 server 0.rhel.pool.ntp.org server 1.rhel.pool.ntp.org server 2.rhel.pool.ntp.org 注意：有的老系统里，有下面这两行配置。如何有，就启动这两行，如果没有，可以跳过 配置文件参数说明： # 1. 关于权限设定部分 #权限的设定主要以 restrict 这个参数来设定，主要的语法为： #restrict IP mask netmask_IP parameter （pəˈramitər ：参数） #其中 IP 可以是IP地址，也可以是 default ，default 就类似 0.0.0.0 #至于 paramter 则有： #ignore ：关闭所有的 NTP 联机服务 #nomodify：表示 Client 端不能更改 Server 端的时间参数，不过， Client 端仍然可以透过 Server 端来进行网络校时。 #notrust ：该 Client 除非通过认证，否则该 Client 来源将被视为不信任网域 #noquery ：不提供 Client 端的时间查询 #notrap ：不提供trap这个远程事件登入 。 不提供trap这个远程事件登陆（remote event logging)的功能。 #如果 paramter 完全没有设定，那就表示该 IP (或网域)“没有任何限制” restrict default nomodify notrap noquery # 关闭所有的 NTP 要求封包 restrict 133.100.11.8 #允许上游服务器133.100.11.8通过，并且指定上游服务器为133.100.11.8，并且设置为首先服务器。 restrict 127.0.0.1 #这是允许本机查询 restrict 192.168.1.0 mask 255.255.255.0 nomodify #允许192.168.1.0/24网段内的客户端，通过这台NTP Server进行时间同步。 #2. 上层主机的设定 #要设定上层主机主要以 server 这个参数来设定，语法为： #server [IP|HOST Name] #Server 后面接的就是我们上层 Time Server 啰！同步时间为，从上到下，写的越靠上，优先级越高。server 0.pool.ntp.org server 1.pool.ntp.org server 2.pool.ntp.org server cn.pool.ntp.org prefer #其他设置值，以系统默认值即可 # 另外，为了解决更新时间封包的传送延迟动作， 所以可以使用 driftfile 来规定我们的主机 # 在与 Time Server 沟通时所花费的时间，可以记录在 driftfile # 后面接的文件内，例如下面的范例中，我们的 NTP server 与 cn.pool.ntp.org联机时所花费的时间会记录在 /etc/ntp/drift文件内 driftfile /var/lib/ntp/drift 例：cat /var/lib/ntp/drift #只有ntp服务工作正常后，这个文件中才有内容。 4.启动的流程 在启动NTP服务前，先对提供服务的这台主机手动的校正一次时间。有时，你的时间和NTP服务器时间相差太大，NTP会以你当前系统时间为准，不作同步。（因为启动服务器，端口会被服务端占用，就不能手动同步时间了） ntpdate time.windows.com 然后在启动服务 service ntpd start 或 /etc/init.d/ntpd start 查看端口是否服务启动成功 netstat -ln|grep 123 确认我们的NTP服务器已经更新了自己的时间 ntpstat #如果出现一下信心那么就代表成功了 synchronized to NTP server(127.127.1.0) at stratum 11 #可以看到我们当前在11层。 time correct to within 950ms # ms毫秒是一种较为微小的时间单位，是一秒的千分之一。 polling（轮询） server every 64 s 5.NTP服务同步硬件时间 最后提及一点，ntp服务，默认只会同步系统时间。如果想要让ntp同时同步硬件时间，可以设置/etc/sysconfig/ntpd 文件。 在/etc/sysconfig/ntpd文件中，添加 SYNC_HWCLOCK=yes 这样，就可以让硬件时间与系统时间一起同步。 如下： [root@desktop2 ~]# cat /etc/sysconfig/ntpd //允许BIOS与系统时间同步 # Drop root to id &apos;ntp:ntp&apos; by default. SYNC_HWCLOCK=yes OPTIONS=&quot;-u ntp:ntp -p /var/run/ntpd.pid -g&quot; 3.常见错误解决方案第一种问题：no server suitable for synchronization found 其实，这不是一个错误。而是由于每次重启NTP服务器之后大约要3－5分钟客户端才能与server建立正常的通讯连接。当此时用客户端连接服务端就会报这样的信息。一般等待几分钟就可以了。 第二种问题：unsynchronised polling server every 64 s 1、 在启动服务之前，先要手动同步下时间，系统时间和硬件时间都要同步 2、 修改配置文件，在定义server 字段下添加两行： server 127.127.1.0 fudge 127.127.1.0 stratum 10 server127.127.1.0 如果上面的服务器都无同步时间，就和本地系统时间同步。 127.127.1.0在这里是一个IP地址，不是网段。 fudge127.127.1.0 stratum 10 # 127.127.1.0 为第10层。 ntp和127.127.1.0同步完后，就变成了11层。 ntp是层次阶级的。同步上层服务器的stratum 大小不能超过或等于16。 如果没有以上两个错误，可以不用添加这两行，按照上面的笔记配置即可 4.应用场景1)集群应用 2)内网NTP服务器","tags":[{"name":"CentOS6.8","slug":"CentOS6-8","permalink":"http://cyysu.github.io/tags/CentOS6-8/"},{"name":"NTP服务","slug":"NTP服务","permalink":"http://cyysu.github.io/tags/NTP服务/"}]},{"title":"RSYNC服务","date":"2017-03-15T11:13:48.109Z","path":"2017/03/15/3.Linux运维服务-RSYNC服务/","text":"Linux运维笔记(就老男孩运维28期、马哥教育、学神IT、老段带你学Linux、Linux-Cast整理而来)声明 “-“ 后面接的是段落小节标题 笔记按照服务一般配置整理 本文采用软件为 MarkdownPad2进行编辑 本文记录时间 2/27/2017 5:38:32 PM 请将本文ip替换成自己的ip 本文大纲1.开篇的话 2.RSYNC服务 3.Rysnc特性和优点 1.开篇的话学习Linux服务的大体流程如下 了解服务的作用：名称，功能，特点 安装 配置文件位置，端口 服务启动关闭的脚本 此服务的使用方法 修改配置文件，实战举例 排错(从下到上，从内到外) 2.简介RSYNC=Remote Sync 远程同步 高效，一定要结合shell 官方网站：https://rsync.samba.org/ Author： Andrew Tridgell, Wayne Davison, and others Andrew Tridgell是Samba项目的领导者和主要开发人员，同时还在参与开发rsync、Linux Kernel。 与SCP的比较：scp=无法备份大量数据，类似windows的复制 rsync=边复制 ，边统计，边比较 3.Rysnc特性和优点可以镜像保存整个目录树和文件系统。 可以很容易做到保持原来文件的权限、时间、软硬链接等等。 无须特殊权限即可安装。 快速：第一次同步时 rsync 会复制全部内容，但在下一次只传输修改过的文件。 压缩传输：rsync 在传输数据的过程中可以实行压缩及解压缩操作，因此可以使用更少的带宽。 安全：可以使用scp、ssh等方式来传输文件，当然也可以通过直接的socket连接。 支持匿名传输，以方便进行网站镜象。 选择性保持：符号连接，硬链接，文件属性，权限，时间等","tags":[{"name":"CentOS6.8","slug":"CentOS6-8","permalink":"http://cyysu.github.io/tags/CentOS6-8/"},{"name":"RSYNC服务","slug":"RSYNC服务","permalink":"http://cyysu.github.io/tags/RSYNC服务/"}]},{"title":"DHCP服务","date":"2017-03-15T11:13:48.058Z","path":"2017/03/15/2.Linux运维服务-DHCP服务/","text":"###Linux运维笔记(就老男孩运维28期、马哥教育、学神IT、老段带你学Linux、Linux-Cast整理而来) 声明 “-“ 后面接的是段落小节标题 笔记按照服务一般配置整理 本文采用软件为 MarkdownPad2进行编辑 本文记录时间 2/27/2017 5:38:32 PM 请将本文ip替换成自己的ip 本文大纲1.开篇的话 2.DHCP服务 3.常见错误解决方案 4.应用场景 5.和windows server的异同 1.开篇的话学习Linux服务的大体流程如下 了解服务的作用：名称，功能，特点 安装 配置文件位置，端口 服务启动关闭的脚本 此服务的使用方法 修改配置文件，实战举例 排错(从下到上，从内到外 如果公司对DHCP服务器系统没有要求 那么建议用windows搭建 2.DHCP服务-简介 名称：DHCP - Dynamic Host Configuration Protocol 动态主机配置协议 功能：DHCP(Dynamic Host Configuration Protocol，动态主机配置协议)是一个局域网的网络协议，使用UDP协议工作， 主要有两个用途： 1、 给内部网络或网络服务供应商自动分配IP地址，主机名，DNS服务器，域名 2、 配合其它服务，实现集成化管理功能。如：无人执守安装服务器 特点： C/S 模式 自动分配IP地址，方便管理 DHCP不会同时租借相同的IP地址给两台主机； DHCP管理员可以约束特定的计算机使用特定的IP地址； 可以为每个DHCP作用域设置很多选项； 客户机在不同子网间移动时不需要重新设置IP地址。每次都自动获取IP地址就可以了。 DHCP的缺点: 当网络上存在多服务器时，一个DHCP服务器不能查出已被其它服务器租出去的IP地址； DHCP服务器不能跨路由器与客户机通信，除非路由器允许BOOTP协议转发。 端口： **DHCP服务使用：端口67(bootps) 68(bootpc) 。 -DHCP工作原理 第一阶段： client -&gt; 发送 discover广播报 -&gt;server #这个过程中只有dhcp server能响应 第二阶段： server -&gt; 发送 OFFER -&gt; client #如果局域网中有多台dhcp server 都会发给client一个offer 但是client只会选择第一个 第三阶段： client -&gt; 发送request -&gt; server #client请求服务器 第四阶段： server -&gt; 发送ack -&gt; client #发送确认报文，并给予ip地址 第五阶段：当ip地址的租期到达一半的时候，就会发生续租报文 client -&gt; 发送REQUEST(renew) -&gt; server 第六阶段： server -&gt; ack -&gt; client 便于理解 为了便于理解，我们把DHCP客户机比做餐馆里的客人，DHCP服务器工作原理当中，服务器比做服务员（一个餐馆里也可以有多个服务员），IP地址比做客户需要的食物。那么可以这样描述整个过程：客人走进餐馆，问：“有没有服务员啊？”（DHCP discover），多个服务员同时回答：“有，我这有鸡翅”“有，我这有汉堡”（DHCP offer）。 客人说：“好吧，我要一份汉堡”（DHCP request，这个客人比较死板，总是选择第一次听到的食物），端着汉堡的服务员回应了一声：“来啦”（DHCP ack），并把食物端到客人面前，供其享用（将网卡和IP地址绑定）。客人下次来的时候，就直接找上次那个服务员点自己喜欢的汉堡了（DHCP request），如果还有汉堡，服务员会再次确认并上菜（DHCP ack），而如果已经卖完了，服务员则会告诉客人：“不好意思，已经卖完了”（DHCP nack）。 当然，服务员隔一段时间会来收拾一次桌子，除非客人特别说明这菜还要继续吃的，服务员会将剩菜端走。 注意 客户端执行DHCP DISCOVER 后，如果没有DHCP 服务器响应客户端的请求，客户端会随机使用169.254.0.0/16 网段中的一个IP 地址配置本机地址 -搭建服务 1.安装软件 yum install -y dhcp 2.配置文件 cp /usr/share/dhcpd.conf.sample /etc/dhcp/dhcpd.conf chkconfig dhcpd on 配置完服务是启动不成功的,启动失败的原因是 dhcp服务器配置的IP地址和本地的ip地址分发是不相同。 ##在启动DHCP服务之前，需要给DHCP Server配置一个静态的IP地址 3.配置文件解析 DHCP配置文件参数说明 1)、主配置文件介绍 dhcp 范本配置文件内容包含了部分参数、声明以及选项的用法，其中注释部分可以放在任何位 置，并以“#”号开头，当一行内容结束时，以“;”号结束，大括号所在行除外 可以看出整个配置文件分成全局和局部两个部分。但是并不容易看出哪些属于参数，哪些属于声明和选项。 概念与协议： 作用域：可以分配IP的范围 subnet 地址池：可以分配给客户端的IP，range包括的IP 保留地址：指定某个客户端使用一个特定IP，通过host配置的 租约(时间)：客户端可以使用这个IP地址的时间 2)、配置文件：/etc/dhcp/dhcpd.conf 部分配置解释 # option definitions common to all supported networks... ＃定义全局配置，通用于所有支持的网络选项. option domain-name &quot;example.org&quot;; #为客户端指定所属的域类似windows上的AD域 option domain-name-servers ns1.example.org, ns2.example.org; #为客户端指定DNS服务器地址 default-lease-time 600; 作用：定义默认IP 租约时间，以秒为单位的租约时间。 50%:续约。(续不上继续用) 87.5%:再次续约。(续不上找别人) DHCP工作站除了在开机的时候发出 DHCPrequest 请求之外，在租约期限一半的时候也会发出 DHCPrequest ，如果此时得不到 DHCP服务器的确认的话，工作站还可以继续使用该IP；当租约期过了87.5%时，如果客户机仍然无法与当初的DHCP服务器联系上，它将与其它 DHCP服务器通信。如果网络上再没有任何DHCP协议服务器在运行时，该客户机必须停止使用该IP地址，并从发送一个Dhcpdiscover数据包开始，再一次重复整个过程。要是您想退租，可以随时送出 DHCPRELEASE 命令解约，就算您的租约在前一秒钟才获得的。 max-lease-time 7200; (数字) 作用：定义客户端IP租约时间的最大值，当客户端超过租约时间，却尚未更新IP 时，最长可以使用该IP 的时间； 例： 比如，机器在开机获得IP地址后，然后关机了。这时，当时间过了default-lease-time 600秒后，没有机器向DHCP续约，DHCP会保留7200秒，保留此IP地址不用于分配给其它机器。 当超过7200秒后，将不再保留此IP地址给此机器。 注意:（3）、（4）都是以秒为单位的租约时间，该项参数可以作用在全局配置中，也可以作用在局部配置中。 log-facility local7; #定义日志类型为 local7 subnet： 声明一般用来指定IP 作用域、定义为客户端分配的IP 地址池等等 声明格式如下： subnet 网络号 netmask 子网掩码 { 选项或参数 } 3)、常见声明的使用如下： 1) subnet 网络号 netmask 子网掩码 {......} 作用:定义作用域，指定子网 如： 注意：网络号必须与DHCP 服务器的网络号相同 下面介绍以下每个选项的含意： range 起始IP 地址 结束IP 地址 作用：指定动态IP 地址范围 注意：可以在subnet（子网） 声明中指定多个range，但多个range 所定义IP 范围不能重复 常用选项介绍 选项通常用来配置DHCP 客户端的可选参数，比如定义客户端的DNS 地址、默认网关等等。选项 内容都是以option 关键字开始。 常见选项使用如下： 1）option routers IP 地址 作用：为客户端指定默认网关 如：option routers 10.5.5.1; 2）option domain-name 作用：为客户端指定默认的域 3) option domain-name-servers IP 地址 作用：为客户端指定DNS 服务器地址 注意：(1)、(2)、(3)选项可以用在全局配置中，也可以用在局部配置中。 4、常见的配置 subnet 192.168.1.0 netmask 255.255.255.0 { range 192.168.1.100 192.168.1.200; option domain-name-servers 192.168.1.1; option domain-name &quot;xuegod.cn&quot;; option routers 192.168.1.1; option broadcast-address 192.168.1.255; default-lease-time 600; max-lease-time 7200; } 配置完之后就可以重启网络服务 5.客户端配置 在以上步骤配置完服务器端之后就可以配置客户端了，首先可以在客户端添加一份网卡，网卡设置为dhcp之后如果都配置正确的话重启网络服务就会产生ip地址 6.查看租期 客户端文件存放在/var/lib/dhclient/dhclient-eth1.leases 服务器文件存放在/var/lib/dhcpd/dpcpd.leases 7.设置ip地址和MAC地址绑定在一起 在DHCP 中的IP 地址绑定用于给客户端分配固定IP 地址。比如服务器需要使用固定IP 地址就可以使用IP 地址绑定，通过MAC 地址与IP 地址的对应关系为指定的物理地址计算机分配固定IP地址。整个配置过程需要用到 host 声明和hardware、fixed-address 参数。 （1）host 主机名 {......} 作用：用于定义保留地址 （2）hardware 类型 硬件地址 作用：定义网络接口类型和硬件地址。常用类型为以太网（ethernet）,地址为MAC 地址。 （3）fixed-address IP 地址 作用：定义DHCP 客户端指定的IP 地址。 host xuegod63 { #这一段内容，要写在subnet字段中，和subnet配合使用。 hardware ethernet 00:0C:29:12:ec:1e; fixed-address 192.168.0.251; } 3.常见错误解决方案-错误解决方案 1.当配置文件复制完成之后，重启hdcpd服务发现无法启动 启动失败的原因是 dhcp服务器配置的IP地址和本地的ip地址分发是不相同。 ##在启动DHCP服务之前，需要给DHCP Server配置一个静态的IP地址 2.在配置dhcpd.conf文件的时候，当到达句尾一定不要忘记“;” 3.如果服务一直启动不成功，仔细检查配置文件，尤其是ip地址的网段 4.应用场景-主要应用 1、 给内部网络或网络服务供应商自动分配IP地址，主机名，DNS服务器，域名 2、 配合其它服务，实现集成化管理功能。如：无人执守安装服务器 5.windows server的异同由于本人不擅长windows server知识，但是为了大家方便给大家找了一些文章 1.http://blog.chinaunix.net/uid-29178012-id-3963202.html 2.http://jingyan.baidu.com/article/c275f6bacef120e33d756701.html 3.http://blog.csdn.net/yuanguozhengjust/article/details/37512269","tags":[{"name":"CentOS6.8","slug":"CentOS6-8","permalink":"http://cyysu.github.io/tags/CentOS6-8/"},{"name":"DHCP服务","slug":"DHCP服务","permalink":"http://cyysu.github.io/tags/DHCP服务/"}]},{"title":"Postfix服务","date":"2017-03-15T11:13:44.663Z","path":"2017/03/15/11.Linux运维服务-Postfix服务/","text":"#YSU-Linux运维笔记模板V3.0 编辑软件：MarkdownPad2 撰写人员：Kali 撰写日期：2017年3月5日 联系作者：cyysu.github.io@gmail.com 友情提示：文章内容如有不对，欢迎指正。 1 开篇的话1.1 学习方法学习Linux服务的大体流程如下 了解服务的作用：名称，功能，特点 安装 配置文件位置，端口 服务启动关闭的脚本 此服务的使用方法 修改配置文件，实战举例 排错(从下到上，从内到外) 2 Postfix服务2.1 简介postfix是Wietse Venema在IBM的GPL协议之下开发的MTA（邮件传输代理）软件。postfix是Wietse Venema想要为使用最广泛的sendmail提供替代品的一个尝试。 在Internet世界中，大部分的电子邮件都是通过sendmail来投递的，大约有100万用户使用sendmail，每天投递上亿封邮件。这真是一个让人吃惊的数字。 Postfix试图更快、更容易管理、更安全，同时还与sendmail保持足够的兼容性 其它邮件服务器： Sendmail、Qmail、Postfix Sendmail的不足 第一个重要的缺点是它的安全性较差，这是因为当其作者Eric Allman最初开始写作这个软件的时候，Internet的用户还很少，因而安全性并不没有得到大家的重视。 由于邮件系统需要处理的是外部发送来的各种各样的信息，甚至包含一些恶意数据，然而sendmail在大多数系统中都是以root身份运行，一旦出现问题，就会对系统安全造成严重影响。在这种情况下，要防止出现安全问题，仅仅依赖程序本身是不可取的，应该从系统结构出发，使程序拥有的特殊权限限制到最小。 第二个，使用Sendmail还会遇到的另一个问题是它的设置相当复杂，对于使用缺省设置来收发电子邮件，问题并不存在。当管理员打算进行一些特殊设置，以便利用Sendmail提供的复杂邮件处理能力时，就不得不面对复杂的宏和正则表达式。 Qmail可以替代Sendmail Qmail，为了解决sendmail的安全问题，整个系统结构需要重新设计。基本的原则是将系统划分为不同的模块，有负责接收外部邮件的，有管理缓冲目录中待发送的邮件队列的，有将邮件发送到远程服务器或本地用户的。Qmail就是按照这个原则进行的设计，它由多个不同功能的小程序组成，只有必要的程序才是setuid程序(即以root用户权限执行)，这样就减少了安全隐患，并且由于这些程序都比较简单一些，因此就可以达到较高的安全性。 今天的主角： 另一种替换软件:Postfix 可以替代sendmail Postfix同样也是采用了模块化的方式，但与Qmail不同的是，Postfix使用了一个主控进程进行监控。Postfix在很多方面都考虑到了安全问题，它甚至不向root分发电子邮件，以避免以root身份读写文件或启动外部程序。考虑到它的作者Wietse Venema曾编写了著名的安全软件TcpWrapper，Postfix的安全性是非常值得信赖的。 Postfix的性能也非常不错，甚至在Qmail作者自己进行的测试中也表明，Postfix的性能和Qmail基本相当。postfix在性能上大约比sendmail快三倍。 Dovecot: 邮件接收服务器： Dovecot 是一个开源的 IMAP 和 POP3 邮件服务器，支持 Linux/Unix 系统。 POP / IMAP4 是 MUA 从邮件服务器中读取邮件时使用的协议。 POP3 是从邮件服务器中下载邮件存起来，IMAP 则是将邮件留在服务器端直接对邮件进行管理、操作。比POP3更先进。 由 Timo Sirainen 开发，最初发布于 2002年7月。作者将安全性考虑在第一，所以 Dovecot 在安全性方面比较出众。 IMAP4是TCP/IP协议族中的一员，现在的版本是“IMAP第四版第一次修订版”。 一个完整的邮件服务器由以下内容构成： postfix（作为发送邮件服务器）+dovecot（作为接收邮件服务器）+mysql（作为数据库） 可以通过foxmail或outlook客户端。也可以通过网页来收邮件。 邮件服务协议和端口： 25 端口：SMTP协议。 SMTP（Simple Mail Transfer Protocol）即简单邮件传输协议,它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。 作用：此协议主要用来发送或中转邮件。SMTP协议属于TCP/IP协议簇， 邮件服务中： 发送： 指的是同属于163邮件服务器两人相互发送邮件。 中转： 使用163邮箱给QQ邮箱发送邮件。 24端口：LMTP(Local Mail Transfer Protocol)[1]，是本地邮件传输协议，与SMTP类似，但不支持邮件队列（queue），主要应用于非广域网的邮件网关。 110端口：POP3协议 POP3(Post Office Protocol 3)即邮局协议的第3个版本，它是规定个人计算机如何连接到互联网上的邮件服务器进行收邮件的协议。 还有POP2协议。 143端口：IMAP IMAP： （Internet Mail Access Protocol Internet邮件访问协议） 。IMAP是斯坦福大学在1986年开发的一种邮件获取协议。它的主要作用是邮件客户端（例如Outlook)可以通过这种协议从邮件服务器上获取邮件的信息，下载邮件等。 当前的权威定义是RFC3501。IMAP协议运行在TCP/IP协议之上，使用的端口是143。它与POP3协议的主要区别是用户可以不用把所有的邮件全部下载，可以通过客户端直接对服务器上的邮件进行操作。他们之间的区别如下: 1：发件人写邮件，通过客户端连接邮件服务器，这个之间使用了 SMTP 协议链接！用 户就是 SMTP 客户端，发送服务器就是我们这儿的 SMTP 服务器！ 2：SMTP 检查我们进入的邮件，将其放到邮件缓冲队列中，等待发送到接受服务器中， 这里要注意，postfix 在这里会检查我们是是否发给自己，若是发给自己的，那么就直接进入 了我们服务器自己的 mailbox！ 3：发送服务器此时充当 SMTP 客户端，接受服务器充当 SMTP 服务端，建立 TCP 链接， 将邮件发送的接受服务器！ 4：接受服务器收到邮件之后，把邮件里面的内容读取，如收件人信息 to:…… 5：收件人打开客户端，使用 POP3 或者 IMAP 协议收取邮件并读取！ 2.2 服务安装、启动和配置服务安装 在安装之前首先要检查一下系统是否已经安装了Sendmail。 rpm -qa | grep sendmail #查看是否安装 sendmail yum remove sendmail -y #卸载 sendmail 下面就开始安装服务 yum install -y postfix dovecot 服务启动、端口检测和加入开机启动项 service postfix restart chkconfig postfix on netstat -antup | grep 25 服务配置 /etc/postfix/main.cf #主配置文件位置 /var/log/maillog #日志文件位置 /var/spool/mail/ #邮件存放位置，对应有相应用户名 配置文件部分参数 [root@xuegod63 ~]# cp /etc/postfix/main.cf /etc/postfix/main.cf.bak [root@xuegod63 ~]# vim /etc/postfix/main.cf queue_directory = /var/spool/postfix #队列目录 command_directory = /usr/sbin #命令位置目录 mail_owner = postfix #postfix运行身份 myhostname = xuegod63.cn #发送邮件时的名字，服务器名字 mydomain = xuegod63.cn #邮件域，用于接受的时候用 myorigin = $mydomain #我来自哪儿，别人收到的时候知道是我发送的 inet_interfaces = localhost #邮件接受监控的地址 inet_protocols = all #启用IPV4和IPV6 mydestination = $myhostname, $mydomain, localhost #服务器负责那些域 mynetworks = 192.168.0.0/24, 127.0.0.0/8 #指定允许使用的IP地址段 alias_maps = hash:/etc/aliases #对某一个用户发，里面的人都可以收到邮件 alias_database = hash:/etc/aliases #home_mailbox = Mailbox #收件箱存放位置 3 精彩案例3.1 配置postfix邮件服务器，实现邮件发送功能。修改主机名和对应关系： [root@xuegod63 postfix]# hostname xuegod63.cn [root@xuegod63 postfix]# cat /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 192.168.1.63 xuegod63.cn 192.168.1.64 xuegod64.cn vim /etc/sysconfig/network NETWORKING=yes HOSTNAME=xuegod63.cn [root@xuegod63 ~]# vim /etc/postfix/main.cf 需要启用和修改的项： myhostname = xuegod63.cn #指定邮件服务器名字，接收用来识别的，也就是一个标识 mydomain = xuegod63.cn #邮件域 myorigin = $mydomain #启用，去掉注释，发信地址，此设置显示为@xuegod63.cn inet_interfaces = all #对外提供MTA服务设置为监听所有网卡，默认只监听本地 #inet_interfaces = localhost #这个注释起来，是默认值，只监控本地 mydestination = $myhostname, localhost.$mydomain, localhost #此行不用改，但是要说明，这是代表邮件服务器负责的那些域 mynetworks_style = subnet #允许转发的来源网段，可选subnet子网，class网段，host本机 mynetworks = 192.168.0.0/24, 127.0.0.0/8 #用户允许的使用的IP地址段 relay_domains = $mydestination #允许转发的目标域 local_recipient_maps = #含有所有本地邮件地址的查询表.SMTP server借此拒收外界寄给不明用户的邮件，启用即可 alias_maps = hash:/etc/aliases #对某个用户发，文件中的用户都可以收到邮件，别名组 alias_database = hash:/etc/aliases #别名数据库 smtpd_banner = $myhostname ESMTP &quot;Welcome XueGod63.cn STMP Server&quot; #自定义服务器信息 重启服务： [root@xuegod63 ~]# service postfix start [root@xuegod63 ~]# netstat -antup | grep 25 测试： mail -s &apos;Postfix1&apos; 3402301871@qq.com &lt; /etc/hosts tail -f /var/log/maillog 在postfix的日志里： 如果status=sent表示已经成功发送。removed表示从队列中删除发送的邮件 如果status= deferred表示延期，需要重试，当重试到一定次数，还失败就抛弃","tags":[{"name":"CentOS6.8","slug":"CentOS6-8","permalink":"http://cyysu.github.io/tags/CentOS6-8/"},{"name":"Postfix服务","slug":"Postfix服务","permalink":"http://cyysu.github.io/tags/Postfix服务/"}]},{"title":"自动化部署","date":"2017-03-15T11:13:44.645Z","path":"2017/03/15/10.Linux运维服务-自动化安装服务器/","text":"#YSU-Linux运维笔记模板V3.0 编辑软件：MarkdownPad2 撰写人员：Kali 撰写日期：2017年3月5日 联系作者：cyysu.github.io@gmail.com 友情提示：文章内容如有不对，欢迎指正。 PXE简介 严格来说，PXE 并不是一种安装方式，而是一种引导的方式。进行 PXE 安装的必要条件是要安装的计算机中包含一个 PXE 支持的网卡（NIC），即网卡中必须要有 PXE Client。PXE （Pre-boot Execution Environment）协议使计算机可以通过网络启动。 协议分为 client 和 server 端，PXE client 在网卡的 ROM 中，当计算机引导时，BIOS 把 PXE client 调入内存执行，由 PXE client 将放置在远端的文件通过网络下载到本地运行。 运行 PXE 协议需要设置 DHCP 服务器 和 TFTP 服务器。DHCP 服务器用来给 PXE client（将要安装系统的主机）分配一个 IP 地址，由于是给 PXE client 分配 IP 地址，所以在配置 DHCP 服务器时需要增加相应的 PXE 设置。 此外，在 PXE client 的 ROM 中，已经存在了 TFTP Client。PXE Client 通过 TFTP 协议到 TFTP Server 上下载所需的文件。 KickStart KickStart是一种无人职守安装方式。KickStart的工作原理是通过记录典型的安装过程中所需人工干预填写的各种参数，并生成一个名为 ks.cfg的文件；在其后的安装过程中（不只局限于生成KickStart安装文件的机器）当出现要求填写参数的情况时，安装程序会首先去查找 KickStart生成的文件，当找到合适的参数时，就采用找到的参数，当没有找到合适的参数时，才需要安装者手工干预。 这样，如果KickStart文件涵盖了安装过程中出现的所有需要填写的参数时，安装者完全可以只告诉安装程序从何处取ks.cfg文件，然后去忙自己的事情。等安装完毕，安装程序会根据ks.cfg中设置的重启选项来重启系统，并结束安装。 PXE + KickStart安装需要准备内容 DHCP 服务器用来给客户机分配IP； TFTP 服务器用来存放PXE的相关文件，比如：系统引导文件； FTP 服务器用来存放系统安装文件； KickStart所生成的ks.cfg配置文件； 带有一个 PXE 支持网卡的将安装的主机； ##以上的基础知识已经讲完，现在就让我们动手来实践一下吧！ 配置基本环境 安装ftp服务yum install vsftpd -y /etc/init.d/vsftpd start chkconfig vsftpd on 安装tftp服务yum install tftp tftp-server xinetd -y 配置tftp服务器： vim /etc/xinetd.d/tftp 修改配置文件里面的13，14行.改成以下内容： disable = no server_args = -s /tftpboot # 表示服务器默认的目录是 /tftpboot 启动服务 /etc/init.d/xinetd restart lsof -i :69 #查看69端口正在被哪个进程使用 netstat -antup | grep 69 #这种方法，只能看到xinetd进程 安装dhcp服务yum install dhcp* -y 配置DHCP服务器： cp /usr/share/doc/dhcp-4.1.1/dhcpd.conf.sample /etc/dhcp/dhcpd.conf 在配置DHCP服务器的时候可以不用在加一张网卡，可以直接使用本机的网卡。这里为了使用Xshell在加一张网卡，但是和实际中都是一样的。 给DHCP服务器添加一张VMNET4网卡，ip设置为192.168.1.10（只要是1网段都行） ifconfig eth1 192.168.1.10/24 vim /etc/dhcp/dhcpd.conf #这里为了简便，只保留一个subnet {。。。} ，取掉其它subnet，改成如下内容： subnet 192.168.1.0 netmask 255.255.255.0 { range 192.168.1.100 192.168.1.200; option domain-name-servers 192.168.1.1; option domain-name &quot;internal.example.org&quot;; option routers 192.168.1.1; option broadcast-address 192.168.1.255; default-lease-time 600; max-lease-time 7200; next-server 192.168.1.10; filename &quot;pxelinux.0&quot;; } 在配置上面的文件的时候一定要注意每行的结尾处要加上分号。配置完，先不启动DHCP ，等所有的软件安装好，最后来启动。 安装PXEyum -y install system-config-kickstart #安装此包时，会把syslinux软件包也安装上。 准备tftp需要共享出去的文件 mount /dev/sr0 /media/ mkdir /tftpboot mkdir /tftpboot/pxelinux.cfg cp /usr/share/syslinux/pxelinux.0 /tftpboot/ cp /media/images/pxeboot/initrd.img /tftpboot/ cp /media/images/pxeboot/vmlinuz /tftpboot/ cp /media/isolinux/isolinux.cfg /tftpboot/pxelinux.cfg/default chmod 644 /tftpboot/pxelinux.cfg/default 修改default，指定安装操作系统的方式和ks.cfg文件路径 vim /tftpboot/pxelinux.cfg/default #修改第1行 改为 default linux,后面的linux意思是寻找下面18行的label linux 然后修改下22行（即在后面添加ks=ftp://192.168.1.10/ks.cfg） 第22行的意思是使安装程序通过FTP服务器访问kickstart文件 制作kickstart安装向导 yum install system-config-kickstart -y LANG=zh_CN.UTF-8 system-config-kickstart #执行system-config-kickstart弹出来界面。 1.设置下默认安装的语言，时区，根口令，然后勾选下面的安装后重新引导 2.配置ftp服务器的安装方法。修改FTP服务器和FTP根目录为/pub 3.配置grub相关选项 4.设置分区 5.配置网络，默认没有网络设置，点击添加网络，设备名称为eth0，网络类型为dhcp 6.验证，默认就可以了。 7.防火墙和selinux根据自己需求选择开启或者禁用。我选择关闭selinux。启用防火墙。 8.安装图形环境选择禁用 9.自定义软件包。默认可能没有勾选桌面。根据自己需求勾选。 我们为了快速度演示安装，不选择安装桌面。 10.安装脚本：在&quot;预安装脚本&quot;，&quot;安装后脚本&quot;对话框中，可以分别添加在安装前、安装后自动动行的可执行语句。此项设置可以使服务器自动化配置变得更加容易。 11.保存文件 -&gt; 点击左上角的文件选择保存，选择下保存的路径 cp ks.cfg /var/ftp #复制ks.cfg文件到/var/ftp目录下 注：ks.cfg就是无人值守安装时要用的Kickstart文件。 要对应：/tftpboot/pxelinux.cfg/default文件中设置过ks=ftp://192.168.1.10/ks.cfg mount /dev/sr0 /var/ftp/pub #挂载RHEL6安装光盘到/var/ftp/pub目录下 建议关闭防火墙和selinux， 如果没有关闭的话，tftp服务会有问题。 [root@xuegod63 ~]# getenforce Disabled 设置防火墙： #iptables -F #service iptables save 配置两台机器的网络模式为：VMnet4 给server 设置一个和DHCP 定义相同网段的IP #现在接下来就是启动DHCP，设置为开机启动 /etc/init.d/dhcpd start chkconfig dhcpd on 修改另一台机器的BIOS启动顺序为网络优先，加电后开始启动。 整个过程工作原理","tags":[{"name":"CentOS6.8","slug":"CentOS6-8","permalink":"http://cyysu.github.io/tags/CentOS6-8/"},{"name":"自动化部署","slug":"自动化部署","permalink":"http://cyysu.github.io/tags/自动化部署/"}]},{"title":"SSH服务","date":"2017-03-15T11:13:44.621Z","path":"2017/03/15/1.Linux运维服务-SSH服务/","text":"Linux运维笔记(就老男孩运维28期、马哥教育、学神IT、老段带你学Linux、Linux-Cast整理而来)声明 “-“ 后面接的是段落小节标题 笔记按照服务一般配置整理 本文采用软件为 MarkdownPad2进行编辑 本文记录时间 2017-02-27 10:24:24 请将本文ip替换成自己的ip 本文大纲1.开篇的话 2.SSH服务 3.排错 4.SSH调优 1.开篇的话学习Linux服务的大体流程如下 了解服务的作用：名称，功能，特点 安装 配置文件位置，端口 服务启动关闭的脚本 此服务的使用方法 修改配置文件，实战举例 排错(从下到上，从内到外) 2.SSH服务- 了解服务 SSHD服务，在我们的linux服务器上经常用到，很重要，涉及到服务器的安全，对这个服务的安全配置要高度重视 SSH 协议：安全外壳协议。为 Secure Shell 的缩写。SSH 为建立在应用层和传输层基础上的安全 sshd服务使用SSH协议可以用来进行远程控制， 或在计算机之间传送文件相比较之前用telnet方式来传输文件要安全很多，因为telnet使用明文传输，是加密传输。 - 服务安装 第一步 ： 准备安装的软件包 openssh-5.3p1-114.el6_7.x86_64：包含OpenSSH 服务器及客户端需要的核心文件 openssh-clients-5.3p1-114.el6_7.x86_64：OpenSSH 客户端软件包 openssh-server-5.3p1-114.el6_7.x86_64：OpenSSH 服务器软件包 openssh-askpass-5.3p1-114.el6_7.x86_64：支持对话框窗口的显示，是一个基于X 系统的密码诊断工具 第二步 ：安装软件 1.使用yum安装 yum list all | grep openssh # 查看是否有需要的软件包 yum install openssh* -y # 安装 2.使用rpm安装 rpm -ivh /media/cdrom/Packages/openssh*.rpm 这里推荐使用yum安装 第三步： 检查软件是否安装 rpm -qa | grep openssh #查看软件包 rpm -ql openssh #查看软件安装目录 netstat -ntulp | grep 22 #通过端口查看软件是否开启 第四步： 启动服务 service sshd restart #重启服务 chkconfig sshd on #加入开机自启 chkconfig --list sshd #查看是否配置开机自启成功 第五步： 远程登陆 1.ssh [远程主机用户名] @[远程服务器主机名或IP地址] ssh 192.168.200.100 ssh root@192.168.200.100 ssh root@192.168.200.100 -p 22 ssh -l root 192.168.200.100 #注意没有@符号 2.第一次登录服务器时系统没有保存远程主机的信息，为了确认该主机身份会提示用户是否续连接，输入yes 后登录这时系统会将远程服务器信息写入用户主目录下的$HOME/.ssh/known_hosts 文件中，下次再进行登录时因为保存有该主机信息就不会再提示了 3.远程登录以普通用户登陆 useradd cat &amp;&amp; echo 123456 | passwd --stdin cat ssh -l cat 192.168.200.100 - 配置文件 OpenSSH 配置文件 OpenSSH 常用配置文件有两个 /etc/ssh/ssh_config 和 /etc/sshd_config ssh_config 为客户端配置文件 sshd_config 为服务器端配置文件 服务脚本 线上一般配置(实战) 常用的启动脚本主要有以下两个 /etc/init.d/sshd restart/stop/start/status service sshd restart/stop/start/status 注意事项 1.参数前面有#，表示是默认值。当然#号也表示注释 2.登录系统的默认日志存放在哪？ sshd服务日志存放在： /var/log/secure 由于这个文件/etc/rsyslog.conf 定义的sshd服务的日志存放位置？ # The authpriv file has restricted access. authpriv.* /var/log/secure 3.修改配置文件要重启服务 /etc/ssh/sshd_config 配置文件 1.Port 22 -&gt; 设置sshd 监听端口号 # SSH 预设使用 22 这个port，也可以使用多个port，即重复使用 port 这个设定项目！ # 例如想要开放 sshd 端口为 22和 222 ，则多加一行内容为： Port 222 即可 # 然后重新启动 sshd 这样就好了。 建议大家修改 port number 为其它端口。防止别人暴力破解。 2.ListenAddress 0.0.0.0 -&gt; 设置sshd监听ip地址 # 设置sshd 服务器绑定的IP 地址，0.0.0.0 表示侦听所有地址 # 比如192.168.0.63 这个机器只允许0.64来远程登录，那么可以设置 # ListenAddress 192.168.0.64 3.Protocol 2 -&gt; 设置sshd的协议的版本号 # 选择的 SSH 协议版本，可以是 1 也可以是 2 ，CentOS 5.x 预设是仅支援 V2。 安全考虑，设置为最新的协议版本 4.#HostKey /etc/ssh/ssh_host_key -&gt; 设置sshd登陆密钥文件 # 设置包含计算机私人密匙的文件 5.SyslogFacility AUTHPRIV -&gt; 设置日志登陆信息 # 当有人使用 SSH 登入系统的时候，SSH 会记录信息，这个信息要记录的类型为AUTHPRIV。 6.#LogLevel INFO # 登录记录的等级！INFO级别以上。 [关于系统日志的文章](http://blog.csdn.net/beckdon/article/details/32696047 &quot;Linux系统日志&quot;) 涉及到安全调优的配置选项 7.LoginGraceTime 2m #grace 优雅 # 当使用者连上 SSH server 之后，会出现输入密码的画面，在该画面中， # 在多久时间内没有成功连上 SSH server 就强迫断线！若无单位则默认时间为秒！ 可以根据实际情况来修改实际 8.# PermitRootLogin yes # 是否允许 root 登入！预设是允许的，但是建议设定成 no！真实的生产环境服务器，是不允许root账号登陆的！！！ 9.PasswordAuthentication yes # 密码验证当然是需要的！所以这里写 yes，也可以设置为no。在真实的生产服务器上，根据不同安全级别要求，有的是设置不需要密码登陆的，通过认证的秘钥来登陆 10.# PermitEmptyPasswords no # 若上面那一项如果设定为 yes 的话，这一项就最好设定为 no ， # 这个项目在是否允许以空的密码登入！当然不许！ 11.# PrintMotd yes # 登入后是否显示出一些信息呢？例如上次登入的时间、地点等等，预设是 yes # 亦即是打印出 /etc/motd 这个文档的内容。 例：给sshd服务添加一些警告信息 cat /etc/motd echo &apos;Warning ! From now on, all of your operation has been 4record!&apos;&gt; /etc/motd 测试： ssh 192.168.0.64 root@192.168.0.64&apos;s password: Last login: Thu Jun 23 14:02:38 2016 from 192.168.0.1 Warning ! From now on, all of your operation has been record! 12.# PrintLastLog yes # 显示上次登入的信息！预设也是 yes ！ 例： ssh 192.168.0.63 Last login: Tue Nov 4 19:57:31 2014 from 192.168.1.107 #就是这个信息 13.# UseDNS yes # 一般来说，为了要判断客户端来源是正常合法的，因此会使用 DNS 去反查客户端的主机名 # 不过如果是在内网互连，这项目设定为 no 会让联机速度比较快。 3.排错 1.防火墙和selinux关闭 2.软件是否安装、服务是否开启以及端口是否在监听 3.配置文件是否修改 比如 端口号 4.分析日志文件 4.SSHD防止暴力破解 配置文件 1.通过修改配置文件，密码的长度最好大于20位密码复杂度要尽可能有数字、大小写字母和特殊符号混合组成(kepass软件记录软件) 2.修改默认端口号 3.不允许root用户登陆 4.不允许密码登陆，只能通过密钥登陆系统客户端生成密钥对，然后将公钥上传到服务器 ssh-keygen创建私钥默认放在 /root/.ssh/id_rsa,并且需要设置密码来保护客户端私钥的密码，公钥保存在/root/.ssh/id_rsa.pub &gt;传输方法 ssh-copy-id -i 服务器 &gt;在服务器上,服务器会将其替换成了.ssh/authorized_keys和在客户端上的公钥一致 开源防护工具 fail2ban fail2ban可以监视你的系统日志，然后匹配日志的错误系你想执行相应的屏蔽工作，而且可以发送e-mail通知系统管理员，工作的原理是通过分析一定时间内的相关服务日志，将满足动作的相关IP利用iptables加入到dorp列表一定时间。 使用该软件iptables必须要开启，如果ssh配置文件中的端口号发生改变需要更改/etc/fail2ban/jail.conf以及/对应action.d/iptables.conf文件 注：重启iptables服务的话，所有DORP将重置。 fail2ban的安装、使用和配置 1.下载位置 http://www.fail2ban.org 2.解压软件包和安装 tar -zxvf fail2ban-0.8.14.tar.gz -C /usr/local/src 3.执行安装，在安装之前首先检查一下python的版本 python -V python setup.py install 4.目录解释，其配置文件为jail.conf /etc/fail2ban/action.d #动作文件夹，内含默认文件。iptables以及mail等动作配置 /etc/fail2ban/fail2ban.conf #定义了fai2ban日志级别、日志位置及sock文件位置 /etc/fail2ban/filter.d #条件文件夹，内含默认文件。过滤日志关键内容设置 /etc/fail2ban/jail.conf #主要配置文件，模块化。主要设置启用ban动作的服务及动作阀值 5.加入系统启动服务中 cp files/redhat-initd /etc/init.d/fail2ban chkconfig --add fail2ban #开机自动启动 查找一个软件中的启动脚本文件的小方法： grep chkconfig ./* -R --color #启动脚本文件都是含有chkconfig 6.实例文件/etc/fail2ban/jail.conf及说明 [DEFAULT] #全局设置 ignoreip = 127.0.0.1/8 #忽略的IP列表,不受设置限制 bantime = 600 #屏蔽时间，单位：秒 findtime = 600 #这个时间段内超过规定次数会被ban掉 maxretry = 3 #最大尝试次数 backend = auto #日志修改检测机制（gamin、polling和auto这三种） #单个服务检查设置，如设置bantime、findtime、maxretry和全局冲突，服务优先级大于全局设置。 [sshd] enabled = true #是否激活此项（true/false）修改成 true filter = sshd #过滤规则filter的名字，对应filter.d目录下的sshd.conf action = iptables[name=SSH, port=ssh, protocol=tcp] #动作的相关参数，对应action.d/iptables.conf文件 sendmail-whois[name=SSH, dest=you@example.com, sender=fail2ban@example.com, sendername=&quot;Fail2Ban&quot;] #触发报警的收件人 logpath = /var/log/secure #检测的系统的登陆日志文件。这里要写sshd服务日志文件。 默认为logpath = /var/log/sshd.log #5分钟内3次密码验证失败，禁止用户IP访问主机1小时。 配置如下 bantime = 3600 #禁止用户IP访问主机1小时 findtime = 300 #在5分钟内内出现规定次数就开始工作 maxretry = 3 #3次密码验证失败 如果遇到不能发送邮件的首先要确定sendmail可以发送右键，测试代码如下 echo &quot;Hello World&quot; | mail -s test xxx@xxx.com 如果遇到本机不能远程登陆，那么只需要将ssh的日志文件删除即可 也就是/var/log/secure文件内容清除 &gt; /var/log/secure 7.启动服务 service fail2ban start 8.查看服务状态和防火墙是否设置了相关条目 iptables -L -n fail2ban-client status #查看该软件是否工作 #具体看某一项的状态也可以看，如果显示被ban的ip和数目就表示成功了，如果都是0，说明没有成功。相关代码如下 fail2ban-client status ssh-iptables xinetd服务 xinetd(eXtended InterNET services daemon) 扩展因特网服务守护进程，是新一代的网络守护进程服务程序，又叫超级Internet服务器 作用： 通过xinetd服务来管理多种轻量级Internet服务。如： telnet、rsync、 tftp服务等。并为这些服务提供安全访问控制功能。","tags":[{"name":"CentOS6.8","slug":"CentOS6-8","permalink":"http://cyysu.github.io/tags/CentOS6-8/"},{"name":"SSH服务","slug":"SSH服务","permalink":"http://cyysu.github.io/tags/SSH服务/"}]},{"title":"markdown模板","date":"2017-03-14T15:17:53.738Z","path":"2017/03/14/作业部落markdown编辑器模板/","text":"我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 1. 制作一份待办事宜 Todo 列表 [ ] 支持以 PDF 格式导出文稿 [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 [x] 新增 Todo 列表功能 [x] 修复 LaTex 公式渲染问题 [x] 新增 LaTex 公式编号功能 2. 书写一个质能守恒公式[^LaTeX]$$E=mc^2$$ 3. 高亮一段代码[^code]1234567@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 4. 高效绘制 流程图12345678st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 5. 高效绘制 序列图123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 6. 高效绘制 甘特图12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 7. 绘制表格 项目 价格 数量 计算机 \\$1600 5 手机 \\$12 12 管线 \\$1 234 8. 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 Cmd Markdown 简明语法手册，进阶用户可以参考 Cmd Markdown 高阶语法手册 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 什么是 Cmd Markdown您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 编辑/发布/阅读 Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。 1. 实时同步预览我们将 Cmd Markdown 的主界面一分为二，左边为编辑区，右边为预览区，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！ 2. 编辑工具栏也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 编辑区 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。 3. 编辑模式完全心无旁骛的方式编辑文字：点击 编辑工具栏 最右侧的拉伸按钮或者按下 Ctrl + M，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！ 4. 实时的云端文稿为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 编辑工具栏 的最右侧提示 已保存 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。 5. 离线模式在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。 6. 管理工具栏为了便于管理您的文稿，在 预览区 的顶部放置了如下所示的 管理工具栏： 通过管理工具栏可以： 发布：将当前的文稿生成固定链接，在网络上发布，分享 新建：开始撰写一篇新的文稿 删除：删除当前的文稿 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地 列表：所有新增和过往的文稿都可以在这里查看、操作 模式：切换 普通/Vim/Emacs 编辑模式 7. 阅读工具栏 通过 预览区 右上角的 阅读工具栏，可以查看当前文稿的目录并增强阅读体验。 工具栏上的五个图标依次为： 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落 视图：互换左边编辑区和右边预览区的位置 主题：内置了黑白两种模式的主题，试试 黑色主题，超炫！ 阅读：心无旁骛的阅读模式提供超一流的阅读体验 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境 8. 阅读模式在 阅读工具栏 点击 或者按下 Ctrl+Alt+M 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。 9. 标签、分类和搜索在编辑区任意行首位置输入以下格式的文字可以标签当前文档： 标签： 未分类 标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示： 10. 文稿发布和分享在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 (Ctrl+Alt+P) 发布这份文档给好友吧！ 再一次感谢您花费时间阅读这份欢迎稿，点击 (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！ 作者 @ghosert2016 年 07月 07日 [^LaTeX]: 支持 LaTeX 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 MathJax 参考更多使用方法。 [^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，四十一种主流编程语言。","tags":[{"name":"markdown","slug":"markdown","permalink":"http://cyysu.github.io/tags/markdown/"},{"name":"跨平台","slug":"跨平台","permalink":"http://cyysu.github.io/tags/跨平台/"}]},{"title":"Centos6.8下源码安装GitLab","date":"2017-03-14T14:55:19.797Z","path":"2017/03/14/Gitlab源码安装/","text":"作为本博客的第一次的，也同时作为对网络上博客的抄袭而不加以注意做一次贡献，就网络上源码安装Gitlab教程不多，并且很坑，特此整理一份。还请大家持续关注我的博客，转载请注明出处。谢谢 [来自]：(http://www.cyysu.cn &quot;运维技术&quot;) [TOC] 0.开篇的话文章依赖1. 官方博客2. 配置网络yum仓库 提取密码ak1v3. centos下安装gitlab4. centos7下源码安装gitlab 出现错误解决方案依赖 1. 提示没有找不到 Specified ‘mysql2’2. bundle更换源问题3. no tmp uploads folder yet 便捷安装 1. Bitnami安装2. 安装工具 提取密码：xb4e 1.关闭SELINUX和iptables12[root@localhost ~]# service iptables stop #关闭防火墙[root@localhost ~]# setenforce 0 #暂时关闭Selinux 2.添加EPEL存储库12345678wget -O /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6 https://getfedora.org/static/0608B895.txtrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6#验证密钥安装成功rpm -qa gpg*#安装软件包，不区分32和64位rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm 3.添加Remi的RPM存储库12345678910111213141516171819wget -O /etc/pki/rpm-gpg/RPM-GPG-KEY-remi http://rpms.famillecollet.com/RPM-GPG-KEY-remirpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-remi##验证密钥安装成功rpm -qa gpg*#安装软件包rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm#查看上述仓库是否启动yum repolistrepo id repo name statusbase CentOS-6 - Base 6696epel Extra Packages for Enterprise Linux 6 - x86_64 12125extras CentOS-6 - Extras 61remi-safe Safe Remi's RPM repository for Enterprise Linux 6 - x86_64 827updates CentOS-6 - Updates 137repolist: 19846 4.安装GitLab所需的工具12345678yum -y update#安装需要的开发的工具yum -y groupinstall 'Development Tools'yum -y install readline readline-devel ncurses-devel gdbm-devel glibc-devel tcl-devel openssl-devel curl-devel expat-devel db4-devel byacc sqlite-devel libyaml libyaml-devel libffi libffi-devel libxml2 libxml2-devel libxslt libxslt-devel libicu libicu-devel system-config-firewall-tui redis sudo wget crontabs logwatch logrotate perl-Time-HiRes git cmake libcom_err-devel.i686 libcom_err-devel.x86_64 nodejsyum -y install python-docutils 5.安装邮件服务器1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#在这里自行可以自行去配置，官方推荐的是postfix。有机会的话，笔者会研究一下，后续更新上来博客yum install postfixservice postfix restartchkconfig postfix on #修改postfix的主配置文件vim /etc/postfix/main.cf myhostname = sample.test.com ← 设置系统的主机名 mydomain = test.com ← 设置域名（我们将让此处设置将成为E-mail地址“@”后面的部分） myorigin = $mydomain ← 将发信地址“@”后面的部分设置为域名（非系统主机名） inet_interfaces = all ← 接受来自所有网络的请求 mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain ← 指定发给本地邮件的域名 home_mailbox = Maildir/ ← 指定用户邮箱目录 #修改gitlab相关的配置文件 修改内容如下：vim /home/git/gitlab/config/gitlab.yml email_enabled: true email_from: root@cyysu.cn # 发件人的地址 email_display_name: GitLabMaster # 显示的收件人昵称 email_reply_to:#配置上面的hostname的时候要注意修改一个/etc/hosts文件vim /etc/hosts#生效hostname your_hostname#配置完成之后记得要重启服务/etc/init.d/postfix restart/etc/init.d/gitlab restart #检查是否配置成功，开启三个shell窗口tail -f /home/git/gitlab/log/*.logtail -f /var/log/maillog#执行命令进入测试bundle exec rails console production #接下来就变成下面的界面#输入以下命令:sendmail #显示配置ActionMailer::Base.smtp_settings #给自己邮箱发送测试文件#这里测试最好用163邮箱测试，QQ邮箱测试不是太好使Notify.test_email('cyysu@163.com', 'Hello World', 'This is a test message').deliver_now 6.源码安装git12345678910111213#必须要确定git的版本高于2.7.4或更高版本。如果系统安装了git那么需要卸载yum -y remove git#安装git编译需求的软件yum install zlib-devel perl-CPAN gettext curl-devel expat-devel gettext-devel openssl-devel#下载源码并安装mkdir /tmp/git &amp;&amp; cd /tmp/gitcurl --progress https://www.kernel.org/pub/software/scm/git/git-2.9.0.tar.gz | tar xzcd git-2.9.0./configuremakemake prefix=/usr/local install 7.安装Ruby1234567891011121314151617#删除旧的Ruby 1.8软件包（如果存在）。GitLab只支持Ruby 2.1版本系列yum remove ruby#下载并编译mkdir /tmp/ruby &amp;&amp; cd /tmp/rubycurl --progress https://cache.ruby-lang.org/pub/ruby/2.1/ruby-2.1.9.tar.gz | tar xzcd ruby-2.1.9./configure --disable-install-rdocmakemake prefix=/usr/local install#安装Bundler Gemgem install bundler --no-doc# 检测信息，如果输出信息就代表没错which rubyruby -v 8.安装Go12#从GitLab 8.0开始，Git HTTP请求由gitlab-workhorse（以前称为gitlab-git-http-server）处理。这是一个在Go写的小守护进程。要安装gitlab-workhorse，我们需要一个Go编译器。yum install -y golang golang-bin golang-src 9.创建用户123456#Gitlab 创建一个用户adduser --system --shell /bin/bash --comment 'GitLab' --create-home --home-dir /home/git/ git#修改sudoers文件visudoDefaults secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin 10.安装数据库123456789101112131415161718192021222324252627282930#官方推荐用PostgreSQL，这里我们用Mysql来安装#安装软件yum install -y mysql-server mysql-develchkconfig mysqld onservice mysqld start#这里Mysql的版本保持这个样子就可以，亲测可用mysql --version#mysql Ver 14.14 Distrib 5.1.73, for redhat-linux-gnu (x86_64) using readline 5.1#首先对数据库进行一下设置mysql_secure_installation#登陆系统mysql -u root -p#为gitlab创建用户CREATE USER 'git'@'localhost' IDENTIFIED BY 'your passwd';#添加InnoDB引擎SET storage_engine=INNODB;#下面先不创建Gitlab生产数据库，后面有个命令可以创建这里先不创建(不执行)#CREATE DATABASE IF NOT EXISTS `gitlabhq_production` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`;#授权GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, CREATE TEMPORARY TABLES, DROP, INDEX, ALTER, LOCK TABLES, REFERENCES ON `gitlabhq_production`.* TO 'git'@'localhost';#退出数据库\\q 11.安装Redis12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#Gitlab要求Redis版本不低于2.8，系统默认安装版本为2.4.1，卸载当前版本并采用remi源安装最新版本：#卸载当前redis：yum -y remove redis#采用remi源安装最新版本：yum --enablerepo=remi install redis#确保redis在启动时启动：chkconfig redis on#将redis配置为使用套接字：cp /etc/redis.conf /etc/redis.conf.orig#通过将'port'设置为0，禁止在TCP上侦听Redis：sed 's/^port .*/port 0/' /etc/redis.conf.orig | sudo tee /etc/redis.conf#为默认CentOS路径启用Redis套接字：echo 'unixsocket /var/run/redis/redis.sock' | sudo tee -a /etc/redis.confecho -e 'unixsocketperm 0770' | sudo tee -a /etc/redis.conf#创建包含套接字的目录mkdir /var/run/redischown redis:redis /var/run/redischmod 755 /var/run/redis#保留包含套接字的目录（如果适用）if [ -d /etc/tmpfiles.d ]; then echo 'd /var/run/redis 0755 redis redis 10d -' | sudo tee -a /etc/tmpfiles.d/redis.conffi#修改配置文件vim /etc/redis.conf #bind 127.0.0.1#重启服务：service redis restart#如果遇到以下问题#&gt;&gt;&gt; 'vm-enabled no'#Bad directive or wrong number of arguments [FAILED]只需要注释以下内容：#vm-enabled yes#vm-swap-file /tmp/redis.swap#vm-max-memory 0#vm-page-size 32#vm-pages 134217728#vm-max-threads 4#hash-max-zipmap-entries 512#hash-max-zipmap-value 64#将git添加到redis组：usermod -aG redis git 12.安装Gitlab123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#存放gitlab等相关软件集合cd /home/git#下载sudo -u git -H git clone https://gitlab.com/gitlab-org/gitlab-ce.git -b 8-9-stable gitlab#配置，从这里开始直接复制即可，主要就是创建目录，赋予权限# Go to GitLab installation foldercd /home/git/gitlab# Copy the example GitLab configsudo -u git -H cp config/gitlab.yml.example config/gitlab.yml# Update GitLab config file, follow the directions at top of filesudo -u git -H editor config/gitlab.yml# Copy the example secrets filesudo -u git -H cp config/secrets.yml.example config/secrets.ymlsudo -u git -H chmod 0600 config/secrets.yml# Make sure GitLab can write to the log/ and tmp/ directoriessudo chown -R git log/sudo chown -R git tmp/sudo chmod -R u+rwX,go-w log/sudo chmod -R u+rwX tmp/# Make sure GitLab can write to the tmp/pids/ and tmp/sockets/ directoriessudo chmod -R u+rwX tmp/pids/sudo chmod -R u+rwX tmp/sockets/# Create the public/uploads/ directorysudo -u git -H mkdir public/uploads/# Make sure only the GitLab user has access to the public/uploads/ directory# now that files in public/uploads are served by gitlab-workhorsesudo chmod 0700 public/uploadssudo chmod ug+rwX,o-rwx /home/git/repositories/# Change the permissions of the directory where CI build traces are storedsudo chmod -R u+rwX builds/# Change the permissions of the directory where CI artifacts are storedsudo chmod -R u+rwX shared/artifacts/# Copy the example Unicorn configsudo -u git -H cp config/unicorn.rb.example config/unicorn.rb# 查看核心数nproc# Enable cluster mode if you expect to have a high load instance# Ex. change amount of workers to 3 for 2GB RAM server# Set the number of workers to at least the number of coressudo -u git -H editor config/unicorn.rb# Copy the example Rack attack configsudo -u git -H cp config/initializers/rack_attack.rb.example config/initializers/rack_attack.rb# Configure Git global settings for git user# 'autocrlf' is needed for the web editorsudo -u git -H git config --global core.autocrlf input# Disable 'git gc --auto' because GitLab already runs 'git gc' when neededsudo -u git -H git config --global gc.auto 0# Configure Redis connection settingssudo -u git -H cp config/resque.yml.example config/resque.yml# 这里保持默认sudo -u git -H vim config/resque.yml 13.数据库配置12345678910111213141516171819#配置数据库文件sudo -u git cp config/database.yml.mysql config/database.yml#编辑数据库文件sudo -u git -H vim config/database.yml production: adapter: mysql2 encoding: utf8 collation: utf8_general_ci reconnect: false database: gitlabhq_production pool: 10 username: gitlab password: \"gitlab\" # host: localhost # socket: /tmp/mysql.sock#赋予权限sudo -u git -H chmod o-rwx config/database.yml 14.安装Gems12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758cd /home/git/gitlabsudo -u git -H bundle config build.pg --with-pg-config=/usr/pgsql-9.3/bin/pg_configsudo -u git -H bundle install --deployment --without development test mysql aws kerberossudo -u git -H bundle install --deployment --without development test postgres aws kerberos#提示出现这个错误：#Gem::Ext::BuildError: ERROR: Failed to build gem native extension.#/usr/local/bin/ruby extconf.rb --with-pg-config=/usr/pgsql-9.3/bin/pg_config#Using config values from /usr/pgsql-9.3/bin/pg_config#sh: /usr/pgsql-9.3/bin/pg_config: No such file or directory#sh: /usr/pgsql-9.3/bin/pg_config: No such file or directory#解决方法： #卸载 yum remove postgresql #安装pgdg仓库： rpm -Uvh http://yum.postgresql.org/9.3/redhat/rhel-6-x86_64/pgdg-centos93-9.3-2.noarch.rpm #安装postgresql93-server，postgreqsql93-devel和postgresql93-contrib库： yum install postgresql93-server postgresql93-devel postgresql93-contrib #重命名服务脚本： mv /etc/init.d/&#123;postgresql-9.3,postgresql&#125; # 服务启动 service postgresql initdb service postgresql start chkconfig postgresql on#这个时候就不会报错了，提示以下信息 #------------------------------------------------- #Thank you for installing html-pipeline! #You must bundle Filter gem dependencies. #See html-pipeline README.md for more details. #https://github.com/jch/html-pipeline#dependencies #-------------------------------------------------#这里我们修改一个Gemfile文件，刚刚编辑的数据库配置文件我们看到了Mysql2，我们执行的上述步骤是没有安装的，检查的方法可以使用如下 #查看mysql2是否安装 bundle show mysql2 #当前目录在Gitlab目录下，编辑Gemfile文件，修改成如下内容 vim Gemfile gem &quot;mysql2&quot;, &apos;~&gt; 0.3.18&apos; #在执行以下语句 bundle install --no-deployment #执行时间根据网速和电脑配置而言，下面查看以下结果 [root@localhost gitlab]# bundle show mysql2 /usr/local/lib/ruby/gems/2.1.0/gems/mysql2-0.3.20 15.安装GitLab Shell123456789101112131415161718192021222324252627 #安装sudo -u git -H bundle exec rake gitlab:shell:install[v3.0.0] REDIS_URL=unix:/var/run/redis/redis.sock RAILS_ENV=production#编辑文件 这个文件主要就是提供gitlab API 接口的sudo -u git -H vim /home/git/gitlab-shell/config.yml #修改内容如下 gitlab_url: \"http://localhost:8000/\"#这个文件主要提供ruby的服务端口和ip[root@localhost gitlab]# vim config/unicorn.rb #修改内容如下 listen \"127.0.0.1:8080\", :tcp_nopush =&gt; true#这个文件主要提供gitlab服务的端口，ip[root@localhost gitlab]# vim config/gitlab.yml #修改内容如下 gitlab: host: localhost port: 8000 git: bin_path: /usr/local/bin/git#如果后面的操作会提示git找不到那么需要执行以下操作ln -s /usr/local/bin/git /usr/bin/gitrestorecon -Rv /home/git/.ssh 16.安装gitlab-workhorse123456#这个不多说了，很简单cd /home/gitsudo -u git -H git clone https://gitlab.com/gitlab-org/gitlab-workhorse.gitcd gitlab-workhorsesudo -u git -H git checkout v0.7.5sudo -u git -H make 17.初始化数据库12345678910111213141516171819202122232425262728293031323334cd /home/git/gitlabsudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production#这里会提示如下“错误”#Couldn&apos;t drop gitlabhq_production#Access denied for user &apos;gitlab&apos;@&apos;localhost&apos; (using password: YES)Please provide the root password for your MySQL installation&gt;输入你设定的mysql密码#之后就会提示如下内容# -&gt; 0.0104s#-- add_foreign_key(&quot;u2f_registrations&quot;, &quot;users&quot;)# -&gt; 0.0085s#-- initialize_schema_migrations_table()# -&gt; 0.0188s#Adding limits to schema.rb for mysql#-- change_column(:merge_request_diffs, :st_commits, :text, &#123;:limit=&gt;2147483647&#125;)# -&gt; 0.0218s#-- change_column(:merge_request_diffs, :st_diffs, :text, &#123;:limit=&gt;2147483647&#125;)# -&gt; 0.0107s#-- change_column(:snippets, :content, :text, &#123;:limit=&gt;2147483647&#125;)# -&gt; 0.0134s#-- change_column(:notes, :st_diff, :text, &#123;:limit=&gt;2147483647&#125;)# -&gt; 0.0149s#-- change_column(:events, :data, :text, &#123;:limit=&gt;2147483647&#125;)# -&gt; 0.0096s#== Seed from /home/git/gitlab/db/fixtures/production/001_admin.rb#Administrator account created:#login: root#password: You&apos;ll be prompted to create one on your first visit.#当你进行登陆的时候就会提示你更改密码的操作 18.安装启动脚本123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137#安装了这么长时间终于快结束了，心情有没有开心！！！！#当前目录在/home/git/gitlabcp lib/support/init.d/gitlab /etc/init.d/gitlabchkconfig gitlab oncp lib/support/logrotate/gitlab /etc/logrotate.d/gitlab#检查程序的版本#System information#System: CentOS 6.8#Current User: git#Using RVM: no#Ruby Version: 2.1.9p490#Bundler Version:1.14.6#Rake Version: 10.5.0#Sidekiq Version:4.1.2#GitLab information#Version: 8.9.11#Revision: 9a05855#Directory: /home/git/gitlab#DB Adapter: mysql2#URL: http://localhost:8000#HTTP Clone URL: http://localhost:8000/some-group/some-project.git#SSH Clone URL: git@localhost:some-group/some-project.git#Using LDAP: no#Using Omniauth: no#GitLab Shell#Version: 3.0.0#Repositories: /home/git/repositories/#Hooks: /home/git/gitlab-shell/hooks/#Git: /usr/bin/git#生成网页需要的资源sudo -u git -H bundle exec rake assets:precompile RAILS_ENV=production#启动实例service gitlab start#如果看到以下信息，就代表你已经成功安装了Gitlab#Starting GitLab Unicorn#Starting GitLab Sidekiq#Starting Gi充电tLab Workhorse#The GitLab Unicorn web server with pid 80821 is running.#The GitLab Sidekiq job dispatcher with pid 80870 is running.#The GitLab Workhorse with pid 80852 is running.#GitLab and all its components are up and running.#下面在浏览器开始c访问http://localhost:8000#开始就会弹出让你修改密码的界面，之后就提示登陆界面#http://localhost:8000/users/password/edit?reset_password_token=DjzQ-AcPsgdkhx4ckUBg#初始的时候你可以用root和你刚刚设定的密码进行登陆#http://localhost:8000/users/sign_in#如果发现不能登陆，请确保服务启动成功，然后在重点检查以下配置文件#当前目录 /home/git/gitlabvim config/gitlab.ymlvim config/unicorn.rbvim ../gitlab-shell/config.yml#如果提示以下信息，那么需要检测Redis,mysql是否启动/etc/init.d/gitlab restartThe GitLab Unicorn web server is not running.#查看/home/git/gitlab/log/unicorn.stderr.log，最新的日志在末尾。/home/git/gitlab/config/environments/production.rb:82: syntax error#进入命令模式set nu显示行号，找到82行所在。#如果发现启动不了服务，可以尝试重新创建一下数据库sudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production#检测一下程序状态#这里可以看出你的版本是否达到要求，不过笔者一切比较正常。#前几次装的时候出现过版本不对，不过也没有影响使用#可能这是个bug吧 如果那位大神了解这个还请给我留言，谢谢sudo -u git -H bundle exec rake gitlab:check RAILS_ENV=production #Checking GitLab Shell ... # #GitLab Shell version &gt;= 3.0.0 ? ... OK (3.0.0) #Repo base directory exists? ... yes #Repo base directory is a symlink? ... no #Repo base owned by git:git? ... yes #Repo base access is drwxrws---? ... yes #hooks directories in repos are links: ... can't check, you have no projects #Running /home/git/gitlab-shell/bin/check #Check GitLab API access: OK #Check directories and files: # /home/git/repositories/: OK # /home/git/.ssh/authorized_keys: OK #Send ping to redis server: gitlab-shell self-check successful # #Checking GitLab Shell ... Finished # #Checking Sidekiq ... # #Running? ... yes #Number of Sidekiq processes ... 1 # #Checking Sidekiq ... Finished # #Checking Reply by email ... # #Reply by email is disabled in config/gitlab.yml # #Checking Reply by email ... Finished # #Checking LDAP ... # #LDAP is disabled in config/gitlab.yml # #Checking LDAP ... Finished # #Checking GitLab ... # #Git configured with autocrlf=input? ... yes #Database config exists? ... yes #All migrations up? ... yes #Database contains orphaned GroupMembers? ... no #GitLab config exists? ... yes #GitLab config outdated? ... no #Log directory writable? ... yes #Tmp directory writable? ... yes #Uploads directory setup correctly? ... skipped (no tmp uploads folder yet) #Init script exists? ... yes #Init script up-to-date? ... yes #projects have namespace: ... can't check, you have no projects #Redis version &gt;= 2.8.0? ... yes #Ruby version &gt;= 2.1.0 ? ... yes (2.1.9) #Your git bin path is \"/usr/local/bin/git\" #Git version &gt;= 2.7.3 ? ... yes (2.9.0) #Active users: 1 # #Checking GitLab ... Finished 19. Nginx服务器安装1234567891011121314151617181920#说在前头： 这里的web服务器可以选择性安装，就是可以通过外网正常访问你的GitLab,这里web服务器可以选择Nginx或这Apachesudo yum install -y nginxsudo cp lib/support/nginx/gitlab /etc/nginx/conf.d/gitlab.conf#这里默认不修改端口 默认是80vim /etc/nginx/conf.d/gitlab.confvim /etc/nginx/conf.d/default.confvim /etc/nginx/nginx.conf#测试语法sudo nginx -t#启动服务sudo service nginx restartchkconfig nginx onsudo chmod 775 /home/git#在本地电脑访问对于的IP。如果以上均配置正确，就会看到登陆页面http://192.168.223.140:80","tags":[{"name":"CentOS6.8","slug":"CentOS6-8","permalink":"http://cyysu.github.io/tags/CentOS6-8/"},{"name":"Gitlab","slug":"Gitlab","permalink":"http://cyysu.github.io/tags/Gitlab/"},{"name":"源码安装","slug":"源码安装","permalink":"http://cyysu.github.io/tags/源码安装/"}]}]